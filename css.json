var css = {
	animationDelay: {
        id: "0",
        definition: "The animation-delay property specifies a delay for the start of an animation",
        version: "3.0",
		syntax: {
            "time": [
                {
                    type: 'time_in_seconds',
                    values: ['0s']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    animationDirection: {
        id: "1",
        definition: "The animation-direction property defines whether an animation should be played forwards, backwards or in alternate cycles.",
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'reverse', 'alternate', 'alternate-reverse', 'initial', 'inherit']
            }
        ]
    },
    animationDuration: {
        id: "2",
        definition: "The animation-duration property defines how long an animation should take to complete one cycle",
        version: "3.0",
        syntax: {
            "time": [
                {
                    type: 'time_in_seconds',
                    values: ['0s']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    animationFillMode: {
        id: "3",
        definition: "The animation-fill-mode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both)",
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'forwards', 'backwards', 'both', 'initial', 'inherit']
            }
        ]
    },
    animationIterationCount: {
        id: "4",
        definition: "The animation-iteration-id property specifies the number of times an animation should be played",
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: [1]
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['infinite', 'initial', 'inherit']
                }
            ]
        }
    },
    animationName: {
        id: "5",
        definition: "The animation-name property specifies a name for the @keyframes animation.",
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['keyframename', 'none', 'initial', 'inherit']
            }
        ]
    },
    animationPlayState: {
        id: "6",
        definition: "The animation-play-state property specifies whether the animation is running or paused.",
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['paused', 'running', 'initial', 'inherit']
            }
        ]
    },
    animationTimingFunction: {
        id: "7",
        definition: "The animation-timing-function specifies the speed curve of an animation.",
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out', 'step-start', 'step-end', 'steps(int,start, end)', 'cubic-bezier(n,n,n,n)', 'initial', 'inherit']
            }
        ]
    },
    backgroundAttachment: {
        id: "8",
        definition: "The background-attachment property sets whether a background image scrolls with the rest of the page, or is fixed.",
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['scroll', 'fixed', 'local', 'initial', 'inherit']
            }
        ]
    },
    backgroundBlendMode: {
        id: "9",
        definition: "The background-blend-mode property defines the blending mode of each background layer (color and/or image).",
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'multiply', 'screen', 'overlay', 'darken', 'lighten', 'color-dodge', 'saturation', 'color', 'luminosity']
            }
        ]
    },
    backgroundClip: {
        id: "10",
        definition: "The background-clip property defines how far the background (color or image) should extend within an element.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['border-box', 'padding-box', 'content-box', 'initial', 'inherit']
            }
        ]
    },
    backgroundColor: {
        id: "11",
        definition: "The background-color property sets the background color of an element.", 
        version: "1.0",
        syntax: {
            "color_code": [
                {
                    type: 'color_code',
                    values: ['#FFFFFF']
                }
            ],
            "string": [
                {
                    type : 'string',
                    values: ['transparent', 'initial', 'inherit']
                }
            ]
        }
    },
    backgroundImage: {
        id: "12",
        definition: "The background-image property sets one or more background images for an element.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['url', 'none', 'initial', 'inherit']
            }
        ]
    },
    backgroundOrigin: {
        id: "13",
        definition: "The background-origin property specifies the origin position (the background positioning area) of a background image.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['padding-box', 'border-box', 'content-box', 'initial', 'inherit']
            }
        ]
    },
    backgroundPosition: {
        id: "14",
        definition: "The background-position property sets the starting position of a background image.", 
        version: "1.0",
        syntax: {
            "text": [
                {
                    type: 'string',
                    values: ['left', 'right', 'center']
                },
                {
                    type: 'string',
                    values: ['top', 'center',Â 'bottom']
                }
            ],
            "%": [
                {
                    type: 'percentage',
                    values: ['x%']
                },
                {
                    type: 'percentage',
                    values: ['y%']
                }
            ],
            "px": [
                {
                    type: 'number',
                    values: ['0px']
                },
                {
                    type: 'number',
                    values: ['0px']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial, inherit']
                }
            ]
        } 
    },
    backgroundRepeat: {
        id: "15",
        definition: "The background-repeat property sets if/how a background image will be repeated.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['repeat', 'repeat-x', 'repeat-y', 'no-repeat', 'initial', 'inherit']
            }
        ]
    },
    backgroundSize: {
        id: "16",
        definition: "The background-size property specifies the size of the background images.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'length', 'percentage', 'cover', 'contain', 'initial', 'inherit']
            }
        ]
    },
    borderBottomColor: {
        id: "17",
        definition: "The border-bottom-color property sets the color of an element's bottom border",
        version: "1.0",
        syntax: {
            "color_code": [
                {
                    type: 'color_code',
                    values: ['#FFFFFF']
                }
            ],
            "string": [
                {
                    type : 'string',
                    values: ['transparent', 'initial', 'inherit']
                }
            ]
        }
    },
    borderBottomLeftRadius: {
        id: "18",
        definition: "The border-bottom-left-radius property defines the radius of the bottom-left corner.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    borderBottomRightRadius: {
        id: "19",
        definition: "The border-bottom-right-radius property defines the radius of the bottom-right corner.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    borderBottomStyle: {
        id: "20",
        definition: "The border-bottom-style property sets the style of an element's bottom border.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'initial', 'inherit']
            }
        ]
    },
    borderBottomWidth: {
        id: "21",
        definition: "The border-bottom-width property sets the width of an element's bottom border.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['medium', 'thin', 'thick', 'length', 'initial', 'inherit']
            }
        ]
    },
    borderCollapse: {
        id: "22",
        definition: "The border-collapse property sets whether table borders should collapse into a single border or be separated as in standard HTML.", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['separate', 'collapse', 'initial', 'inherit']
            }
        ]
    },
    borderImageOutset: {
        id: "23",
        definition: "The border-image-outset property specifies the amount by which the border image area extends beyond the border box.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', 'number']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    borderImageRepeat: {
        id: "24",
        definition: "The border-image-repeat property specifies whether the border image should be repeated, rounded or stretched.", 
        version: ".0",
        syntax: [
            {
                type: 'string',
                values: ['stretch', 'repeat', 'round', 'initial', 'inherit']
            }
        ]
    },
    borderImageSlice: {
        id: "25",
        definition: "The border-image-slice property specifies how to slice the image specified by border-image-source. The image is always sliced into nine sections: four corners, four edges and the middle.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['number', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['fill', 'initial', 'inherit']
                }
            ]
        }
    },
    borderImageSource: {
        id: "26",
        definition: "The border-image-source property specifies the path to the image to be used as a border (instead of the normal border around an element).", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'image', 'initial', 'inherit']
            }
        ]
    },
    borderImageWidth: {
        id: "27",
        definition: "The border-image-width property specifies the width of the border image.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', 'number', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    borderLeftColor: {
        id: "28",
        definition: "The border-left-color property sets the color of an element's left border.", 
        version: "1.0",
        syntax: {
            "color_code": [
                {
                    type: 'color_code',
                    values: ['#000000']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['transparent', 'initial', 'inherit']
                }
            ]
        }
    },
    borderLeftStyle: {
        id: "29",
        definition: "The border-left-style property sets the style of an element's left border.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'initial', 'inherit']
            }
        ]
    },
    borderLeftWidth: {
        id: "30",
        definition: "The border-left-width property sets the width of an element's left border.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['medium', 'thin', 'thick', 'length', 'initial', 'inherit']
            }
        ]
    },
    borderRightColor: {
        id: "31",
        definition: "The border-right-color property sets the color of an element's right border.", 
        version: "1.0",
        syntax: {
            "color_code": [
                {
                    type: 'color_code',
                    values: ['#000000']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['transparent', 'initial', 'inherit']
                }
            ]
        }
    },
    borderRightStyle: {
        id: "32",
        definition: "The border-right-style property sets the style of an element's right border.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'initial', 'inherit']
            }
        ]
    },
    borderRightWidth: {
        id: "33",
        definition: "The border-right-width property sets the width of an element's right border.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['medium', 'thin', 'thick', 'length', 'initial', 'inherit']
            }
        ]
    },
    borderTopColor: {
        id: "34",
        definition: "The border-top-color property sets the color of an element's top border.", 
        version: "1.0",
        syntax: {
            "color_code": [
                {
                    type: 'color_code',
                    values: ['#000000']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['transparent', 'initial', 'inherit']
                }
            ]
        }
    },
    borderTopLeftRadius: {
        id: "35",
        definition: "The border-top-left-radius property defines the radius of the top-left corner.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['lenght', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    borderTopRightRadius: {
        id: "36",
        definition: "The border-top-right-radius property defines the radius of the top-right corner.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['lenght', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    borderTopStyle: {
        id: "37",
        definition: "The border-top-style property sets the style of an element's top border.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'initial', 'inherit']
            }
        ]
    },
    borderTopWidth: {
        id: "38",
        definition: "The border-top-width property sets the width of an element's top border.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['medium', 'thin', 'thick', 'length', 'initial', 'inherit']
            }
        ]
    },
    bottom: {
        id: "39",
        definition: "The bottom property specifies the vertical position of a positioned element. This property has no effect on non-positioned elements.", 
        version: "2.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['lenght', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    boxShadow: {
        id: "40",
        definition: "The box-shadow property attaches one or more shadows to an element.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['h-offset', 'v-offset', 'blur', 'spread']
                }
            ],
            "color": [
                {
                    type: 'color_code',
                    values: ['#000000']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['none', 'inset', 'initial', 'inherit']
                }
            ]
        }
    },
    boxSizing: {
        id: "41",
        definition: "The box-sizing property defines how the width and height of an element are calculated: should they include padding and borders, or not.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['content-box', 'border-box', 'initial', 'inherit']
            }
        ]
    },
    pageBreakAfter: {
        id: "42",
        definition: "The page-break-after property sets whether a page break should occur AFTER a specified element.", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'always', 'avoid', 'left', 'right', 'initial', 'inherit']
            }
        ]
    },
    pageBreakBefore: {
        id: "43",
        definition: "The page-break-before property sets whether a page break should occur BEFORE a specified element.", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'always', 'avoid', 'left', 'right', 'initial', 'inherit']
            }
        ]
    },
    pageBreakInside: {
        id: "44",
        definition: "The page-break-inside property sets whether a page break is allowed inside a specified element.", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'always', 'avoid', 'initial', 'inherit']
            }
        ]
    },
    captionSide: {
        id: "45",
        definition: "The caption-side property specifies the placement of a table caption.", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['top', 'bottom', 'initial', 'inherit']
            }
        ]
    },
    clear: {
        id: "46",
        definition: "The clear property specifies on which sides of an element floating elements are not allowed to float.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'left', 'right', 'both', 'initial', 'inherit']
            }
        ]
    },
    clip: {
        id: "47",
        definition: "The clip property lets you specify a rectangle to clip an absolutely positioned element. ", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'shape', 'initial', 'inherit']
            }
        ]
    },
    color: {
        id: "48",
        definition: "The color property specifies the color of text.", 
        version: "1.0",
        syntax: {
            "color": [
                {
                    type: 'color_code',
                    values: ['#000000']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    content: {
        id: "49",
        definition: "The content property is used with the :before and :after pseudo-elements, to insert generated content.", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'none', 'counter', 'attr(attribute)', 'string', 'open-quote', 'close-quote', 'no-open-quote', 'no-close-quote', 'url(url)', 'initial', 'inherit']
            }
        ]
    },
    cursor: {
        id: "50",
        definition: "The cursor property specifies the type of cursor to be displayed when pointing on an element.", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['alias', 'all-scroll', 'auto', 'cell', 'context-menu', 'col-resize', 'copy', 'crosshair', 'default', 'e-resize', 'ew-resize', 'grab', 'grabbing', 'help', 'move', 'n-resize', 'ne-resize', 'nesw-resize', 'ns-resize', 'nw-resize', 'nwse-resize', 'no-drop', 'none', 'not-allowed', 'pointer', 'progress', 'row-resize', 's-resize', 'text', 'URL', 'vertical-text', 'w-resize', 'wait', 'zoom-in', 'zoom-out', 'initial', 'inherit']
            }
        ]
    },
    direction: {
        id: "51",
        definition: "The direction property specifies the text direction/writing direction.", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['ltr', 'rtl', 'initial', 'inherit']
            }
        ]
    },
    display: {
        id: "52",
        definition: "The display property specifies the type of box used for an HTML element.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['inline', 'block', 'flex', 'inline-block', 'inline-flex', 'inline-table', 'list-item', 'run-in', 'table', 'table-caption', 'table-column-group', 'table-header-group', 'table-footer-group', 'table-row-group', 'table-cell', 'table-column', 'table-row', 'none', 'initial', 'inherit' ]
            }
        ]
    },
    emptyCells: {
        id: "53",
        definition: "The empty-cells property sets whether or not to display borders and background on empty cells in a table (only for the 'separated borders' model).", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['show', 'hide', 'initial', 'inherit']
            }
        ]
    },
    float: {
        id: "54",
        definition: "The float property specifies whether or not a box (an element) should float.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'left', 'right', 'initial', 'inherit']
            }
        ]
    },
    fontFamily: {
        id: "55",
        definition: "The font-family property specifies the font for an element.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['family-name', 'generic-family', 'initial', 'inherit']
            }
        ]
    },
    fontKerning: {
        id: "56",
        definition: "The font-kerning property controls the usage of the kerning information stored in a font.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'normal', 'none']
            }
        ]
    },
    fontSize: {
        id: "57",
        definition: "The font-size property sets the size of a font.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['medium', 'xx-small', 'x-small', 'small', 'large', 'x-large', 'xx-large', 'smaller', 'larger','initial', 'inherit']
                }
            ]
        }
    },
    fontStretch: {
        id: "58",
        definition: "The font-stretch property allows you to make text wider or narrower.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded', 'initial', 'inherit']
            }
        ]
    },
    fontStyle: {
        id: "59",
        definition: "The font-style property specifies the font style for a text.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'italic', 'oblique', 'initial', 'inherit']
            }
        ]
    },
    fontVariant: {
        id: "60",
        definition: "The font-variant property specifies whether or not a text should be displayed in a small-caps font.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'small-caps', 'initial', 'inherit']
            }
        ]
    },
    fontVariantLigatures: {
        id: "61",
        definition: "The font-variant-ligatures CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'none', 'common-ligatures', 'no-common-ligatures', 'discretionary-ligatures', 'no-discretionary-ligatures', 'historical-ligatures', 'no-historical-ligatures', 'contextual', 'no-contextual']
            }
        ]
    },
    fontVariantCaps: {
        id: "62",
        definition: "The font-variant-caps property allows the selection of alternate glyphs used for small or petite capitals or for titling.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'small-caps', 'all-small-caps', 'petite-caps', 'all-petite-caps', 'unicase', 'titling-caps']
            }
        ]
    },
    fontVariantNumeric: {
        id: "63",
        definition: "The font-variant-numeric property specifies control over numerical forms.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['numeric-figure-values', 'numeric-spacing-values', 'numeric-fraction-values']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['normal', 'ordinal', 'slashed-zero']
                }
            ]
        }
    },
    fontWeight: {
        id: "64",
        definition: "The font-weight property sets how thick or thin characters in text should be displayed.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['100->900']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['normal', 'bold', 'bolder', 'lighter', 'initial', 'inherit']
                }
            ]
        }
    },
    height: {
        id: "65",
        definition: "The height property sets the height of an element.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length in px, cm, etc', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    imageRendering: {
        id: "66",
        definition: "The image-rendering CSS property provides a hint to the browser about the algorithm it should use to scale images.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'crisp-edges', 'pixelated', 'inherit', 'initial', 'unset']
            }
        ]
    },
    isolation: {
        id: "67",
        definition: "The isolation CSS property defines if the element must create a new stacking context.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'isolate', 'inherit', 'initial', 'unset']
            }
        ]
    },
    justifyItems: {
        id: "68",
        definition: "The CSS justify-items property defines the default justify-self for all items of the box, given them the default way of justifying each box along the appropriate axis.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'normal', 'stretch', 'center', 'start', 'end', 'flex-start', 'flex-end', 'self-start', 'self-end', 'left', 'right', 'baseline', 'first baseline', 'last baseline', 'safe center', 'unsafe center', 'legacy right', 'legacy left', 'legacy center', 'inherit', 'initial', 'unset']
            }
        ]
    },
    justifySelf: {
        id: "69",
        definition: "The CSS justify-self property defines the way of justifying a box inside its container along the appropriate axis.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'normal', 'stretch', 'center', 'start', 'end', 'flex-start', 'flex-end', 'self-start', 'self-end', 'left', 'right', 'baseline', 'first baseline', 'last baseline', 'safe center', 'unsafe center', 'inherit', 'initial', 'unset']
            }
        ]
    },
    left: {
        id: "70",
        definition: "The left property sets the left edge of an element to a unit to the left/right of the left edge", 
        version: "2.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    letterSpacing: {
        id: "71",
        definition: "The letter-spacing property increases or decreases the space between characters in a text.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['normal', 'initial', 'inherit']
                }
            ]
        }
    },
    lineHeight: {
        id: "72",
        definition: "The line-height property specifies the line height.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['number', 'length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['normal', 'initial', 'inherit']
                }
            ]
        }
    },
    listStyleImage: {
        id: "73",
        definition: "The list-style-image property replaces the list-item marker with an image.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'url', 'initial', 'inherit']
            }
        ]
    },
    listStylePosition: {
        id: "74",
        definition: "The list-style-position property specifies if the list-item markers should appear inside or outside the content flow.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['inside', 'outside', 'initial', 'inherit']
            }
        ]
    },
    listStyleType: {
        id: "75",
        definition: "The list-style-type specifies the type of list-item marker in a list.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['disc', 'armenian', 'circle', 'cjk-ideographic', 'decimal', 'decimal-leading-zero', 'georgian', 'hebrew', 'hiragana', 'hiragana-iroha', 'katakana', 'katakana-iroha', 'lower-alpha', 'lower-greek', 'lower-latin', 'lower-roman', 'none', 'square', 'upper-alpha', 'upper-latin', 'upper-roman', 'initial', 'inherit']
            }
        ]
    },
    marginBottom: {
        id: "76",
        definition: "The margin-bottom property sets the bottom margin of an element.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    marginLeft: {
        id: "77",
        definition: "The margin-left property sets the left margin of an element.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    marginRight: {
        id: "78",
        definition: "The margin-right property sets the right margin of an element.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    marginTop: {
        id: "79",
        definition: "The margin-top property sets the top margin of an element.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    maxHeight: {
        id: "80",
        definition: "The max-height property is used to set the maximum height of an element.", 
        version: "2.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['none', 'initial', 'inherit']
                }
            ]
        }
    },
    maxWidth: {
        id: "81",
        definition: "The max-width property is used to set the maximum width of an element.", 
        version: "2.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['none', 'initial', 'inherit']
                }
            ]
        }
    },
    minHeight: {
        id: "82",
        definition: "The min-height property is used to set the minimum height of an element.", 
        version: "2.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    minWidth: {
        id: "83",
        definition: "The min-width property is used to set the minimum width of an element.", 
        version: "2.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    mixBlendMode: {
        id: "84",
        definition: "The mix-blend-mode CSS property describes how an element's content should blend with the content of the element's direct parent and the element's background.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'multiply', 'screen', 'overlay', 'darken', 'lighten', 'color-dodge', 'color-burn', 'hard-light', 'soft-light', 'difference', 'exclusion', 'hue', 'saturation', 'color', 'luminosity', 'initial', 'inherit', 'unset']
            }
        ]
    },
    objectFit: {
        id: "85",
        definition: "The CSS object-fit property is used to specify how an <img> or <video> should be resized to fit its container.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['fill', 'contain', 'cover', 'none', 'scale-down', 'initial', 'inherit']
            }
        ]
    },
    objectPosition: {
        id: "86",
        definition: "The object-position property determines the alignment of the replaced element inside its box.", 
        version: "3.0",
        syntax: [
            {
                type: 'number',
                values: ['50% 50%']
            }
        ]
    },
    offsetDistance: {
        id: "87",
        definition: "The offset-distance CSS property specifies a position along an offset-path.", 
        version: "3.0",
        syntax: [
            {
                type: 'number',
                values: ['length', '%']
            }
        ]
    },
    offsetPath: { /**** SYNTAX ISSUE. MARKED FOR REVIEW ****/
        id: "88",
        definition: "The offset-path CSS property specifies the offset path where the element gets positioned.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: []
            }
        ]
    },
    offsetRotate: {
        id: "89",
        definition: "The offset-rotate CSS property defines the direction of the element while positioning along the offset path.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['angle']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'reverse']
                }
            ]
        }
    },
    opacity: {
        id: "90",
        definition: "The opacity property sets the opacity level for an element.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['0.0 -> 1.0']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    orphans: {
        id: "91",
        definition: "The orphans CSS property specifies the minimum number of lines in a block container that must be shown at the bottom of a page, region, or column. This property is normally used to control how breaks occur.", 
        version: "2.0",
        syntax: [
            {
                type: 'number',
                values: ['integer']
            }
        ]
    },
    outlineColor: {
        id: "92",
        definition: "An outline is a line that is drawn around elements (outside the borders) to make the element stand out.", 
        version: "2.0",
        syntax: {
            "color": [
                {
                    type: 'color_code',
                    values: ['#000000']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['invert', 'initial', 'inherit']
                }
            ]
        }
    },
    outlineOffset: {
        id: "93",
        definition: "The outline-offset property adds space between an outline and the edge or border of an element.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['0']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    outlineStyle: {
        id: "94",
        definition: "An outline is a line that is drawn around elements (outside the borders) to make the element stand out.", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'initial', 'inherit']
            }
        ]
    },
    outlineWidth: {
        id: "95",
        definition: "The outline-width specifies the width of an outline.", 
        version: "2.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['medium', 'thin', 'thick', 'initial', 'inherit']
                }
            ]
        }
    },
    overflowAnchor: {
        id: "96",
        definition: "The overflow-anchor property enables us to opt out of Scroll Anchoring, which is a browser feature intended to allow content to load above the user's current DOM location without changing the user's location once that content has been fully loaded.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'none']
            }
        ]
    },
    overflowWrap: {
        id: "97",
        definition: "The overflow-wrap CSS property specifies whether or not the browser should insert line breaks within words to prevent text from overflowing its content box.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'break-word', 'inherit', 'initial', 'unset']
            }
        ]
    },
    overflowX: {
        id: "98",
        definition: "The overflow-x property specifies what to do with the left/right edges of the content - if it overflows the element's content area.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['visible', 'hidden', 'scroll', 'auto', 'initial', 'inherit']
            }
        ]
    },
    overflowY: {
        id: "99",
        definition: "The overflow-y property specifies what to do with the top/bottom edges of the content - if it overflows the element's content area.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['visible', 'hidden', 'scroll', 'auto', 'initial', 'inherit']
            }
        ]
    },
    paddingBottom: {
        id: "100",
        definition: "The padding-bottom property sets the bottom padding (space) of an element.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    paddingLeft: {
        id: "101",
        definition: "The padding-left property sets the left padding (space) of an element.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    paddingRight: {
        id: "102",
        definition: "The padding-right property sets the right padding (space) of an element.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    paddingTop: {
        id: "103",
        definition: "The padding-top property sets the top padding (space) of an element.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    pointerEvents: {
        id: "104",
        definition: "The pointer-events CSS property specifies under what circumstances (if any) a particular graphic element can become the target of mouse events.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'none', 'inherit', 'initial', 'unset']
            }
        ]
    },
    position: {
        id: "105",
        definition: "The position property specifies the type of positioning method used for an element (static, relative, absolute or fixed).", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['static', 'absolute', 'fixed', 'relative', 'sticky', 'initial', 'inherit']
            }
        ]
    },
    resize: {
        id: "106",
        definition: "The resize property specifies whether or not an element is resizable by the user.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'both', 'horizontal', 'vertical', 'initial', 'inherit']
            }
        ]
    },
    right: {
        id: "107",
        definition: "The right property sets the right edge of an element to a unit to the left/right to its normal position.", 
        version: "2.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    scrollBehavior: {
        id: "108",
        definition: "The scroll-behavior CSS property specifies the scrolling behavior for a scrolling box", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'smooth', 'inherit', 'initial', 'unset']
            }
        ]
    },
    speak: {
        id: "109",
        definition: "The speak property in CSS is for specifying how a browser should speak the content it reads, such as through a screen reader.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['inherit', 'speak', 'none', 'normal', 'spell-out']
            }
        ]
    },
    tableLayout: {
        id: "110",
        definition: "The table-layout property sets the table layout algorithm to be used for a table.", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'fixed', 'initial', 'inherit']
            }
        ]
    },
    tabSize: {
        id: "111",
        definition: "The tab-size property specifies the length of the space used for the tab character.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', 'number']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    textAlign: {
        id: "112",
        definition: "The text-align property specifies the horizontal alignment of text in an element.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['left', 'right', 'center', 'justify', 'initial', 'inherit']
            }
        ]
    },
    textAlignLast: {
        id: "113",
        definition: "The text-align-last property specifies how to align the last line of a text. The text-align-last property will only work for elements with the text-align property set to justify.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'left', 'right', 'center', 'justify', 'start', 'end', 'initial', 'inherit']
            }
        ]
    },
    textDecoration: {
        id: "114",
        definition: "The text-decoration property specifies the decoration added to text.", 
        version: "1.0 | 3.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'underline', 'overline', 'line-through', 'initial', 'inherit']
            }
        ]
    },
    textDecorationLine: {
        id: "115",
        definition: "The text-decoration-line property specifies what type of line, if any, the decoration will have.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'underline', 'overline', 'line-through', 'initial', 'inherit']
            }
        ]
    },
    textDecorationStyle: {
        id: "116",
        definition: "The text-decoration-style property specifies how the line, if any, will display.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['solid', 'double', 'dotted', 'dashed', 'wavy', 'initial', 'inherit                 ']
            }
        ]
    },
    textDecorationColor: {
        id: "117",
        definition: "The text-decoration-color property specifies the color of the text-decoration (underlines, overlines, linethroughs).", 
        version: "3.0",
        syntax: {
            "color": [
                {
                    type: 'color_code',
                    values: ['#000000']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    textDecorationSkip: {
        id: "118",
        definition: "The text-decoration-skip CSS property specifies what parts of the elementâs content any text decoration affecting the element must skip over. ", 
        version: "3.0",
        syntax: {
            "single keyword": [
                {
                    type: 'string',
                    values: ['none', 'objects', 'edges', 'spaces', 'inherit', 'initial', 'unset']
                }
            ],
            "multiple keywords": [
                {
                    type: 'string',
                    values: ['spaces', 'objects', 'leading-spaces', 'trailing-spaces', 'edges', 'box-decoration']
                },
                {
                    type: 'string',
                    values: ['spaces', 'objects', 'leading-spaces', 'trailing-spaces', 'edges', 'box-decoration']
                }
            ]
        }
    },
    textUnderlinePosition: {
        id: "119",
        definition: "The text-underline-position CSS property specifies the position of the underline which is set using the text-decoration property's underline value.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'under', 'left', 'right', 'initial', 'inherit', 'unset']
            }
        ]
    },
    textIndent: {
        id: "120",
        definition: "The text-indent property specifies the indentation of the first line in a text-block.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    textRendering: {
        id: "121",
        definition: "The text-rendering CSS property provides information to the rendering engine about what to optimize for when rendering text.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'optimizeSpeed', 'optimizeLegibility', 'geometricPrecision', 'inherit', 'initial', 'unset']
            }
        ]
    },
    textShadow: {
        id: "122",
        definition: "The text-shadow property adds shadow to text.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['h-shadow', 'v-shadow', 'blur-shadow']
                }
            ],
            "color": [
                {
                    type: 'color_code',
                    values: ['#000000']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['none', 'initial', 'inherit']
                }
            ]
        }
    },
    textSizeAdjust: {
        id: "123",
        definition: "The text-size-adjust property allows control over the text inflation algorithm used on some mobile devices. ", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['none', 'auto', 'initial', 'inherit', 'unset']
                }
            ]
        }
    },
    textOverflow: {
        id: "124",
        definition: "The text-overflow property specifies how overflowed content that is not displayed should be signaled to the user.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['clip', 'ellipsis', 'string', 'initial', 'inherit']
            }
        ]
    },
    textTransform: {
        id: "125",
        definition: "The text-transform property controls the capitalization of text.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'capitalize', 'uppercase', 'lowercase', 'initial', 'inherit']
            }
        ]
    },
    top: {
        id: "126",
        definition: "For relatively positioned elements, the top property sets the top edge of an element to a unit above/below its normal position.", 
        version: "2.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    touchAction: {
        id: "127",
        definition: "The touch-action CSS property specifies whether, and in what ways, a given region can be manipulated by the user via a touchscreen", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'none', 'pan-x', 'pan-left', 'pan-right', 'pan-y', 'pan-up', 'pan-down', 'pinch-zoom', 'manipulation', 'inherit', 'initial', 'unset']
            }
        ]
    },
    transitionDelay: {
        id: "128",
        definition: "The transition-delay property specifies when the transition effect will start.", 
        version: "3.0",
        syntax: {
            "time": [
                {
                    type: 'time',
                    values: ['time in seconds or milliseconds']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    transitionDuration: {
        id: "129",
        definition: "The transition-duration property specifies how many seconds (s) or milliseconds (ms) a transition effect takes to complete.", 
        version: "3.0",
        syntax: {
            "time": [
                {
                    type: 'time',
                    values: ['time in seconds or milliseconds']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    transitionProperty: {
        id: "130",
        definition: "The transition-property property specifies the name of the CSS property the transition effect is for (the transition effect will start when the specified CSS property changes).", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'all', 'property', 'initial', 'inherit']
            }
        ]
    },
    transitionTimingFunction: {
        id: "131",
        definition: "The transition-timing-function property specifies the speed curve of the transition effect.", 
        version: "3.0",
        syntax: [
                {
                    type: 'string',
                    values: ['linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out', 'step-start', 'step-end', 'steps(int,start, end)', 'cubic-bezier(n,n,n,n)', 'initial', 'inherit']
                }
        ]
    },
    unicodeBidi: {
        id: "132",
        definition: "The unicode-bidi property is used together with the direction property to set or return whether the text should be overridden to support multiple languages in the same document.", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'embed', 'bidi-override', 'initial', 'inherit']
            }
        ]
    },
    verticalAlign: {
        id: "133",
        definition: "The vertical-align property sets the vertical alignment of an element.", 
        version: ".0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['baseline', 'sub', 'super', 'top', 'text-top', 'middle', 'bottom', 'text-bottom', 'initial', 'inherit']
                }
            ]
        }
    },
    visibility: {
        id: "134",
        definition: "The visibility property specifies whether or not an element is visible.", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['visible', 'hidden', 'collapse', 'initial', 'inherit']
            }
        ]
    },
    whiteSpace: {
        id: "135",
        definition: "The white-space property specifies how white-space inside an element is handled.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'nowrap', 'pre', 'pre-line', 'pre-wrap', 'initial', 'inherit']
            }
        ]
    },
    widows: {
        id: "136",
        definition: "The widows CSS property specifies the minimum number of lines in a block container that must be shown at the top of a page, region, or column. This property is normally used to control how breaks occur.", 
        version: ".0",
        syntax: [
            {
                type: 'number',
                values: ['integer']
            }
        ]
    },
    width: {
        id: "137",
        definition: "The width property sets the width of an element.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    willChange: {
        id: "138",
        definition: "The will-change CSS property provides a way for authors to hint browsers about the kind of changes to be expected on an element, so that the browser can set up appropriate optimizations ahead of time before the element is actually changed.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'scroll-position', 'contents', 'transform', 'opacity', 'inherit', 'initial', 'unset', 'left', 'top']
            }
        ]
    },
    wordBreak: {
        id: "139",
        definition: "The word-break property specifies line breaking rules for non-CJK scripts.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'break-all', 'keep-all', 'initial', 'inherit']
            }
        ]
    },
    wordSpacing: {
        id: "140",
        definition: "The word-spacing property increases or decreases the white space between words.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['normal', 'initial', 'inherit']
                }
            ]
        }
    },
    wordWrap: {
        id: "141",
        definition: "The word-wrap property allows long words to be able to be broken and wrap onto the next line.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'break-word', 'initial', 'inherit']
            }
        ]
    },
    zIndex: {
        id: "142",
        definition: "The z-index property specifies the stack order of an element.", 
        version: "2.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['number']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    zoom: {
        id: "143",
        definition: "The zoom CSS Descriptor sets the initial zoom factor of a document defined by @viewport.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['number', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto']
                }
            ]
        }
    },
    backfaceVisibility: {
        id: "145",
        definition: "The backface-visibility property defines whether or not the back face of an element should be visible when facing the user.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['visible', 'hidden', 'initial', 'inherit']
            }
        ]
    },
    columnCount: {
        id: "161",
        definition: "The column-count property specifies the number of columns an element should be divided into.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['number']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    columnGap: {
        id: "162",
        definition: "The column-gap property specifies the gap between the columns.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['normal', 'initial', 'inherit']
                }
            ]
        }
    },
    columnRuleColor: {
        id: "163",
        definition: "The column-rule-color property specifies the color of the rule between columns.", 
        version: "3.0",
        syntax: {
            "color": [
                {
                    type: 'color_code',
                    values: ['#000000']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    columnRuleStyle: {
        id: "164",
        definition: "The column-rule-style property specifies the style of the rule between columns.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'initial', 'inherit']
            }
        ]
    }
	/* backgroundPosition: {
		version: "1.0",
		syntax: [
			{
				type: 'string',
				values: ['left', 'right', 'center', 'top', 'bottom']
			},
			{
				type: 'string',
				values: ['left', 'right', 'center', 'top', 'bottom']
			}
        ]
        syntax_new: {
            "text": [
                {
                    type: 'string',
                    values: ['left', 'right', 'center']
                },
                {
                    type: 'string',
                    values: ['top', 'center',Â 'bottom']
                }
            ],
            "%": [
                {
                    type: 'percentage',
                    values: ['x%']
                },
                {
                    type: 'percentage',
                    values: ['y%']
                }
            ]
        } 
	},*/
};