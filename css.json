var css = {
	animationDelay: {
        id: "0",
        definition: "The animation-delay property specifies a delay for the start of an animation",
        version: "3.0",
		syntax: {
            "time": [
                {
                    type: 'time_in_seconds',
                    values: ['0s']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    animationDirection: {
        id: "1",
        definition: "The animation-direction property defines whether an animation should be played forwards, backwards or in alternate cycles.",
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'reverse', 'alternate', 'alternate-reverse', 'initial', 'inherit']
            }
        ]
    },
    animationDuration: {
        id: "2",
        definition: "The animation-duration property defines how long an animation should take to complete one cycle",
        version: "3.0",
        syntax: {
            "time": [
                {
                    type: 'time_in_seconds',
                    values: ['0s']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    animationFillMode: {
        id: "3",
        definition: "The animation-fill-mode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both)",
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'forwards', 'backwards', 'both', 'initial', 'inherit']
            }
        ]
    },
    animationIterationCount: {
        id: "4",
        definition: "The animation-iteration-id property specifies the number of times an animation should be played",
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: [1]
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['infinite', 'initial', 'inherit']
                }
            ]
        }
    },
    animationName: {
        id: "5",
        definition: "The animation-name property specifies a name for the @keyframes animation.",
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['keyframename', 'none', 'initial', 'inherit']
            }
        ]
    },
    animationPlayState: {
        id: "6",
        definition: "The animation-play-state property specifies whether the animation is running or paused.",
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['paused', 'running', 'initial', 'inherit']
            }
        ]
    },
    animationTimingFunction: {
        id: "7",
        definition: "The animation-timing-function specifies the speed curve of an animation.",
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out', 'step-start', 'step-end', 'steps(int,start, end)', 'cubic-bezier(n,n,n,n)', 'initial', 'inherit']
            }
        ]
    },
    backgroundAttachment: {
        id: "8",
        definition: "The background-attachment property sets whether a background image scrolls with the rest of the page, or is fixed.",
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['scroll', 'fixed', 'local', 'initial', 'inherit']
            }
        ]
    },
    backgroundBlendMode: {
        id: "9",
        definition: "The background-blend-mode property defines the blending mode of each background layer (color and/or image).",
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'multiply', 'screen', 'overlay', 'darken', 'lighten', 'color-dodge', 'saturation', 'color', 'luminosity']
            }
        ]
    },
    backgroundClip: {
        id: "10",
        definition: "The background-clip property defines how far the background (color or image) should extend within an element.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['border-box', 'padding-box', 'content-box', 'initial', 'inherit']
            }
        ]
    },
    backgroundColor: {
        id: "11",
        definition: "The background-color property sets the background color of an element.", 
        version: "1.0",
        syntax: {
            "color_code": [
                {
                    type: 'color_code',
                    values: ['#FFFFFF']
                }
            ],
            "string": [
                {
                    type : 'string',
                    values: ['transparent', 'initial', 'inherit']
                }
            ]
        }
    },
    backgroundImage: {
        id: "12",
        definition: "The background-image property sets one or more background images for an element.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['url', 'none', 'initial', 'inherit']
            }
        ]
    },
    backgroundOrigin: {
        id: "13",
        definition: "The background-origin property specifies the origin position (the background positioning area) of a background image.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['padding-box', 'border-box', 'content-box', 'initial', 'inherit']
            }
        ]
    },
    backgroundPosition: {
        id: "14",
        definition: "The background-position property sets the starting position of a background image.", 
        version: "1.0",
        syntax: {
            "text": [
                {
                    type: 'string',
                    values: ['left', 'right', 'center']
                },
                {
                    type: 'string',
                    values: ['top', 'center',Â 'bottom']
                }
            ],
            "%": [
                {
                    type: 'percentage',
                    values: ['x%']
                },
                {
                    type: 'percentage',
                    values: ['y%']
                }
            ],
            "px": [
                {
                    type: 'number',
                    values: ['0px']
                },
                {
                    type: 'number',
                    values: ['0px']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial, inherit']
                }
            ]
        } 
    },
    backgroundRepeat: {
        id: "15",
        definition: "The background-repeat property sets if/how a background image will be repeated.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['repeat', 'repeat-x', 'repeat-y', 'no-repeat', 'initial', 'inherit']
            }
        ]
    },
    backgroundSize: {
        id: "16",
        definition: "The background-size property specifies the size of the background images.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'length', 'percentage', 'cover', 'contain', 'initial', 'inherit']
            }
        ]
    },
    borderBottomColor: {
        id: "17",
        definition: "The border-bottom-color property sets the color of an element's bottom border",
        version: "1.0",
        syntax: {
            "color_code": [
                {
                    type: 'color_code',
                    values: ['#FFFFFF']
                }
            ],
            "string": [
                {
                    type : 'string',
                    values: ['transparent', 'initial', 'inherit']
                }
            ]
        }
    },
    borderBottomLeftRadius: {
        id: "18",
        definition: "The border-bottom-left-radius property defines the radius of the bottom-left corner.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    borderBottomRightRadius: {
        id: "19",
        definition: "The border-bottom-right-radius property defines the radius of the bottom-right corner.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    borderBottomStyle: {
        id: "20",
        definition: "The border-bottom-style property sets the style of an element's bottom border.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'initial', 'inherit']
            }
        ]
    },
    borderBottomWidth: {
        id: "21",
        definition: "The border-bottom-width property sets the width of an element's bottom border.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['medium', 'thin', 'thick', 'length', 'initial', 'inherit']
            }
        ]
    },
    borderCollapse: {
        id: "22",
        definition: "The border-collapse property sets whether table borders should collapse into a single border or be separated as in standard HTML.", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['separate', 'collapse', 'initial', 'inherit']
            }
        ]
    },
    borderImageOutset: {
        id: "23",
        definition: "The border-image-outset property specifies the amount by which the border image area extends beyond the border box.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', 'number']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    borderImageRepeat: {
        id: "24",
        definition: "The border-image-repeat property specifies whether the border image should be repeated, rounded or stretched.", 
        version: ".0",
        syntax: [
            {
                type: 'string',
                values: ['stretch', 'repeat', 'round', 'initial', 'inherit']
            }
        ]
    },
    borderImageSlice: {
        id: "25",
        definition: "The border-image-slice property specifies how to slice the image specified by border-image-source. The image is always sliced into nine sections: four corners, four edges and the middle.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['number', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['fill', 'initial', 'inherit']
                }
            ]
        }
    },
    borderImageSource: {
        id: "26",
        definition: "The border-image-source property specifies the path to the image to be used as a border (instead of the normal border around an element).", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'image', 'initial', 'inherit']
            }
        ]
    },
    borderImageWidth: {
        id: "27",
        definition: "The border-image-width property specifies the width of the border image.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', 'number', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    borderLeftColor: {
        id: "28",
        definition: "The border-left-color property sets the color of an element's left border.", 
        version: "1.0",
        syntax: {
            "color_code": [
                {
                    type: 'color_code',
                    values: ['#000000']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['transparent', 'initial', 'inherit']
                }
            ]
        }
    },
    borderLeftStyle: {
        id: "29",
        definition: "The border-left-style property sets the style of an element's left border.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'initial', 'inherit']
            }
        ]
    },
    borderLeftWidth: {
        id: "30",
        definition: "The border-left-width property sets the width of an element's left border.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['medium', 'thin', 'thick', 'length', 'initial', 'inherit']
            }
        ]
    },
    borderRightColor: {
        id: "31",
        definition: "The border-right-color property sets the color of an element's right border.", 
        version: "1.0",
        syntax: {
            "color_code": [
                {
                    type: 'color_code',
                    values: ['#000000']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['transparent', 'initial', 'inherit']
                }
            ]
        }
    },
    borderRightStyle: {
        id: "32",
        definition: "The border-right-style property sets the style of an element's right border.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'initial', 'inherit']
            }
        ]
    },
    borderRightWidth: {
        id: "33",
        definition: "The border-right-width property sets the width of an element's right border.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['medium', 'thin', 'thick', 'length', 'initial', 'inherit']
            }
        ]
    },
    borderTopColor: {
        id: "34",
        definition: "The border-top-color property sets the color of an element's top border.", 
        version: "1.0",
        syntax: {
            "color_code": [
                {
                    type: 'color_code',
                    values: ['#000000']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['transparent', 'initial', 'inherit']
                }
            ]
        }
    },
    borderTopLeftRadius: {
        id: "35",
        definition: "The border-top-left-radius property defines the radius of the top-left corner.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['lenght', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    borderTopRightRadius: {
        id: "36",
        definition: "The border-top-right-radius property defines the radius of the top-right corner.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['lenght', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    borderTopStyle: {
        id: "37",
        definition: "The border-top-style property sets the style of an element's top border.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'initial', 'inherit']
            }
        ]
    },
    borderTopWidth: {
        id: "38",
        definition: "The border-top-width property sets the width of an element's top border.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['medium', 'thin', 'thick', 'length', 'initial', 'inherit']
            }
        ]
    },
    bottom: {
        id: "39",
        definition: "The bottom property specifies the vertical position of a positioned element. This property has no effect on non-positioned elements.", 
        version: "2.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['lenght', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    boxShadow: {
        id: "40",
        definition: "The box-shadow property attaches one or more shadows to an element.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['h-offset', 'v-offset', 'blur', 'spread']
                }
            ],
            "color": [
                {
                    type: 'color_code',
                    values: ['#000000']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['none', 'inset', 'initial', 'inherit']
                }
            ]
        }
    },
    boxSizing: {
        id: "41",
        definition: "The box-sizing property defines how the width and height of an element are calculated: should they include padding and borders, or not.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['content-box', 'border-box', 'initial', 'inherit']
            }
        ]
    },
    pageBreakAfter: {
        id: "42",
        definition: "The page-break-after property sets whether a page break should occur AFTER a specified element.", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'always', 'avoid', 'left', 'right', 'initial', 'inherit']
            }
        ]
    },
    pageBreakBefore: {
        id: "43",
        definition: "The page-break-before property sets whether a page break should occur BEFORE a specified element.", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'always', 'avoid', 'left', 'right', 'initial', 'inherit']
            }
        ]
    },
    pageBreakInside: {
        id: "44",
        definition: "The page-break-inside property sets whether a page break is allowed inside a specified element.", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'always', 'avoid', 'initial', 'inherit']
            }
        ]
    },
    captionSide: {
        id: "45",
        definition: "The caption-side property specifies the placement of a table caption.", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['top', 'bottom', 'initial', 'inherit']
            }
        ]
    },
    clear: {
        id: "46",
        definition: "The clear property specifies on which sides of an element floating elements are not allowed to float.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'left', 'right', 'both', 'initial', 'inherit']
            }
        ]
    },
    clip: {
        id: "47",
        definition: "The clip property lets you specify a rectangle to clip an absolutely positioned element. ", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'shape', 'initial', 'inherit']
            }
        ]
    },
    color: {
        id: "48",
        definition: "The color property specifies the color of text.", 
        version: "1.0",
        syntax: {
            "color": [
                {
                    type: 'color_code',
                    values: ['#000000']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    content: {
        id: "49",
        definition: "The content property is used with the :before and :after pseudo-elements, to insert generated content.", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'none', 'counter', 'attr(attribute)', 'string', 'open-quote', 'close-quote', 'no-open-quote', 'no-close-quote', 'url(url)', 'initial', 'inherit']
            }
        ]
    },
    cursor: {
        id: "50",
        definition: "The cursor property specifies the type of cursor to be displayed when pointing on an element.", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['alias', 'all-scroll', 'auto', 'cell', 'context-menu', 'col-resize', 'copy', 'crosshair', 'default', 'e-resize', 'ew-resize', 'grab', 'grabbing', 'help', 'move', 'n-resize', 'ne-resize', 'nesw-resize', 'ns-resize', 'nw-resize', 'nwse-resize', 'no-drop', 'none', 'not-allowed', 'pointer', 'progress', 'row-resize', 's-resize', 'text', 'URL', 'vertical-text', 'w-resize', 'wait', 'zoom-in', 'zoom-out', 'initial', 'inherit']
            }
        ]
    },
    direction: {
        id: "51",
        definition: "The direction property specifies the text direction/writing direction.", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['ltr', 'rtl', 'initial', 'inherit']
            }
        ]
    },
    display: {
        id: "52",
        definition: "The display property specifies the type of box used for an HTML element.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['inline', 'block', 'flex', 'inline-block', 'inline-flex', 'inline-table', 'list-item', 'run-in', 'table', 'table-caption', 'table-column-group', 'table-header-group', 'table-footer-group', 'table-row-group', 'table-cell', 'table-column', 'table-row', 'none', 'initial', 'inherit' ]
            }
        ]
    },
    emptyCells: {
        id: "53",
        definition: "The empty-cells property sets whether or not to display borders and background on empty cells in a table (only for the 'separated borders' model).", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['show', 'hide', 'initial', 'inherit']
            }
        ]
    },
    float: {
        id: "54",
        definition: "The float property specifies whether or not a box (an element) should float.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'left', 'right', 'initial', 'inherit']
            }
        ]
    },
    fontFamily: {
        id: "55",
        definition: "The font-family property specifies the font for an element.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['family-name', 'generic-family', 'initial', 'inherit']
            }
        ]
    },
    fontKerning: {
        id: "56",
        definition: "The font-kerning property controls the usage of the kerning information stored in a font.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'normal', 'none']
            }
        ]
    },
    fontSize: {
        id: "57",
        definition: "The font-size property sets the size of a font.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['medium', 'xx-small', 'x-small', 'small', 'large', 'x-large', 'xx-large', 'smaller', 'larger','initial', 'inherit']
                }
            ]
        }
    },
    fontStretch: {
        id: "58",
        definition: "The font-stretch property allows you to make text wider or narrower.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded', 'initial', 'inherit']
            }
        ]
    },
    fontStyle: {
        id: "59",
        definition: "The font-style property specifies the font style for a text.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'italic', 'oblique', 'initial', 'inherit']
            }
        ]
    },
    fontVariant: {
        id: "60",
        definition: "The font-variant property specifies whether or not a text should be displayed in a small-caps font.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'small-caps', 'initial', 'inherit']
            }
        ]
    },
    fontVariantLigatures: {
        id: "61",
        definition: "The font-variant-ligatures CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'none', 'common-ligatures', 'no-common-ligatures', 'discretionary-ligatures', 'no-discretionary-ligatures', 'historical-ligatures', 'no-historical-ligatures', 'contextual', 'no-contextual']
            }
        ]
    },
    fontVariantCaps: {
        id: "62",
        definition: "The font-variant-caps property allows the selection of alternate glyphs used for small or petite capitals or for titling.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'small-caps', 'all-small-caps', 'petite-caps', 'all-petite-caps', 'unicase', 'titling-caps']
            }
        ]
    },
    fontVariantNumeric: {
        id: "63",
        definition: "The font-variant-numeric property specifies control over numerical forms.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['numeric-figure-values', 'numeric-spacing-values', 'numeric-fraction-values']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['normal', 'ordinal', 'slashed-zero']
                }
            ]
        }
    },
    fontWeight: {
        id: "64",
        definition: "The font-weight property sets how thick or thin characters in text should be displayed.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['100->900']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['normal', 'bold', 'bolder', 'lighter', 'initial', 'inherit']
                }
            ]
        }
    },
    height: {
        id: "65",
        definition: "The height property sets the height of an element.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length in px, cm, etc', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    imageRendering: {
        id: "66",
        definition: "The image-rendering CSS property provides a hint to the browser about the algorithm it should use to scale images.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'crisp-edges', 'pixelated', 'inherit', 'initial', 'unset']
            }
        ]
    },
    isolation: {
        id: "67",
        definition: "The isolation CSS property defines if the element must create a new stacking context.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'isolate', 'inherit', 'initial', 'unset']
            }
        ]
    },
    justifyItems: {
        id: "68",
        definition: "The CSS justify-items property defines the default justify-self for all items of the box, given them the default way of justifying each box along the appropriate axis.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'normal', 'stretch', 'center', 'start', 'end', 'flex-start', 'flex-end', 'self-start', 'self-end', 'left', 'right', 'baseline', 'first baseline', 'last baseline', 'safe center', 'unsafe center', 'legacy right', 'legacy left', 'legacy center', 'inherit', 'initial', 'unset']
            }
        ]
    },
    justifySelf: {
        id: "69",
        definition: "The CSS justify-self property defines the way of justifying a box inside its container along the appropriate axis.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'normal', 'stretch', 'center', 'start', 'end', 'flex-start', 'flex-end', 'self-start', 'self-end', 'left', 'right', 'baseline', 'first baseline', 'last baseline', 'safe center', 'unsafe center', 'inherit', 'initial', 'unset']
            }
        ]
    },
    left: {
        id: "70",
        definition: "The left property sets the left edge of an element to a unit to the left/right of the left edge", 
        version: "2.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    letterSpacing: {
        id: "71",
        definition: "The letter-spacing property increases or decreases the space between characters in a text.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['normal', 'initial', 'inherit']
                }
            ]
        }
    },
    lineHeight: {
        id: "72",
        definition: "The line-height property specifies the line height.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['number', 'length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['normal', 'initial', 'inherit']
                }
            ]
        }
    },
    listStyleImage: {
        id: "73",
        definition: "The list-style-image property replaces the list-item marker with an image.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'url', 'initial', 'inherit']
            }
        ]
    },
    listStylePosition: {
        id: "74",
        definition: "The list-style-position property specifies if the list-item markers should appear inside or outside the content flow.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['inside', 'outside', 'initial', 'inherit']
            }
        ]
    },
    listStyleType: {
        id: "75",
        definition: "The list-style-type specifies the type of list-item marker in a list.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['disc', 'armenian', 'circle', 'cjk-ideographic', 'decimal', 'decimal-leading-zero', 'georgian', 'hebrew', 'hiragana', 'hiragana-iroha', 'katakana', 'katakana-iroha', 'lower-alpha', 'lower-greek', 'lower-latin', 'lower-roman', 'none', 'square', 'upper-alpha', 'upper-latin', 'upper-roman', 'initial', 'inherit']
            }
        ]
    },
    marginBottom: {
        id: "76",
        definition: "The margin-bottom property sets the bottom margin of an element.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    marginLeft: {
        id: "77",
        definition: "The margin-left property sets the left margin of an element.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    marginRight: {
        id: "78",
        definition: "The margin-right property sets the right margin of an element.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    marginTop: {
        id: "79",
        definition: "The margin-top property sets the top margin of an element.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    maxHeight: {
        id: "80",
        definition: "The max-height property is used to set the maximum height of an element.", 
        version: "2.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['none', 'initial', 'inherit']
                }
            ]
        }
    },
    maxWidth: {
        id: "81",
        definition: "The max-width property is used to set the maximum width of an element.", 
        version: "2.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['none', 'initial', 'inherit']
                }
            ]
        }
    },
    minHeight: {
        id: "82",
        definition: "The min-height property is used to set the minimum height of an element.", 
        version: "2.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    minWidth: {
        id: "83",
        definition: "The min-width property is used to set the minimum width of an element.", 
        version: "2.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    mixBlendMode: {
        id: "84",
        definition: "The mix-blend-mode CSS property describes how an element's content should blend with the content of the element's direct parent and the element's background.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'multiply', 'screen', 'overlay', 'darken', 'lighten', 'color-dodge', 'color-burn', 'hard-light', 'soft-light', 'difference', 'exclusion', 'hue', 'saturation', 'color', 'luminosity', 'initial', 'inherit', 'unset']
            }
        ]
    },
    objectFit: {
        id: "85",
        definition: "The CSS object-fit property is used to specify how an <img> or <video> should be resized to fit its container.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['fill', 'contain', 'cover', 'none', 'scale-down', 'initial', 'inherit']
            }
        ]
    },
    objectPosition: {
        id: "86",
        definition: "The object-position property determines the alignment of the replaced element inside its box.", 
        version: "3.0",
        syntax: [
            {
                type: 'number',
                values: ['50% 50%']
            }
        ]
    },
    offsetDistance: {
        id: "87",
        definition: "The offset-distance CSS property specifies a position along an offset-path.", 
        version: "3.0",
        syntax: [
            {
                type: 'number',
                values: ['length', '%']
            }
        ]
    },
    offsetPath: { /**** SYNTAX ISSUE. MARKED FOR REVIEW ****/
        id: "88",
        definition: "The offset-path CSS property specifies the offset path where the element gets positioned.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: []
            }
        ]
    },
    offsetRotate: {
        id: "89",
        definition: "The offset-rotate CSS property defines the direction of the element while positioning along the offset path.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['angle']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'reverse']
                }
            ]
        }
    },
    opacity: {
        id: "90",
        definition: "The opacity property sets the opacity level for an element.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['0.0 -> 1.0']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    orphans: {
        id: "91",
        definition: "The orphans CSS property specifies the minimum number of lines in a block container that must be shown at the bottom of a page, region, or column. This property is normally used to control how breaks occur.", 
        version: "2.0",
        syntax: [
            {
                type: 'number',
                values: ['integer']
            }
        ]
    },
    outlineColor: {
        id: "92",
        definition: "An outline is a line that is drawn around elements (outside the borders) to make the element stand out.", 
        version: "2.0",
        syntax: {
            "color": [
                {
                    type: 'color_code',
                    values: ['#000000']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['invert', 'initial', 'inherit']
                }
            ]
        }
    },
    outlineOffset: {
        id: "93",
        definition: "The outline-offset property adds space between an outline and the edge or border of an element.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['0']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    outlineStyle: {
        id: "94",
        definition: "An outline is a line that is drawn around elements (outside the borders) to make the element stand out.", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'initial', 'inherit']
            }
        ]
    },
    outlineWidth: {
        id: "95",
        definition: "The outline-width specifies the width of an outline.", 
        version: "2.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['medium', 'thin', 'thick', 'initial', 'inherit']
                }
            ]
        }
    },
    overflowAnchor: {
        id: "96",
        definition: "The overflow-anchor property enables us to opt out of Scroll Anchoring, which is a browser feature intended to allow content to load above the user's current DOM location without changing the user's location once that content has been fully loaded.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'none']
            }
        ]
    },
    overflowWrap: {
        id: "97",
        definition: "The overflow-wrap CSS property specifies whether or not the browser should insert line breaks within words to prevent text from overflowing its content box.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'break-word', 'inherit', 'initial', 'unset']
            }
        ]
    },
    overflowX: {
        id: "98",
        definition: "The overflow-x property specifies what to do with the left/right edges of the content - if it overflows the element's content area.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['visible', 'hidden', 'scroll', 'auto', 'initial', 'inherit']
            }
        ]
    },
    overflowY: {
        id: "99",
        definition: "The overflow-y property specifies what to do with the top/bottom edges of the content - if it overflows the element's content area.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['visible', 'hidden', 'scroll', 'auto', 'initial', 'inherit']
            }
        ]
    },
    paddingBottom: {
        id: "100",
        definition: "The padding-bottom property sets the bottom padding (space) of an element.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    paddingLeft: {
        id: "101",
        definition: "The padding-left property sets the left padding (space) of an element.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    paddingRight: {
        id: "102",
        definition: "The padding-right property sets the right padding (space) of an element.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    paddingTop: {
        id: "103",
        definition: "The padding-top property sets the top padding (space) of an element.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    pointerEvents: {
        id: "104",
        definition: "The pointer-events CSS property specifies under what circumstances (if any) a particular graphic element can become the target of mouse events.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'none', 'inherit', 'initial', 'unset']
            }
        ]
    },
    position: {
        id: "105",
        definition: "The position property specifies the type of positioning method used for an element (static, relative, absolute or fixed).", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['static', 'absolute', 'fixed', 'relative', 'sticky', 'initial', 'inherit']
            }
        ]
    },
    resize: {
        id: "106",
        definition: "The resize property specifies whether or not an element is resizable by the user.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'both', 'horizontal', 'vertical', 'initial', 'inherit']
            }
        ]
    },
    right: {
        id: "107",
        definition: "The right property sets the right edge of an element to a unit to the left/right to its normal position.", 
        version: "2.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    scrollBehavior: {
        id: "108",
        definition: "The scroll-behavior CSS property specifies the scrolling behavior for a scrolling box", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'smooth', 'inherit', 'initial', 'unset']
            }
        ]
    },
    speak: {
        id: "109",
        definition: "The speak property in CSS is for specifying how a browser should speak the content it reads, such as through a screen reader.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['inherit', 'speak', 'none', 'normal', 'spell-out']
            }
        ]
    },
    tableLayout: {
        id: "110",
        definition: "The table-layout property sets the table layout algorithm to be used for a table.", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'fixed', 'initial', 'inherit']
            }
        ]
    },
    tabSize: {
        id: "111",
        definition: "The tab-size property specifies the length of the space used for the tab character.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', 'number']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    textAlign: {
        id: "112",
        definition: "The text-align property specifies the horizontal alignment of text in an element.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['left', 'right', 'center', 'justify', 'initial', 'inherit']
            }
        ]
    },
    textAlignLast: {
        id: "113",
        definition: "The text-align-last property specifies how to align the last line of a text. The text-align-last property will only work for elements with the text-align property set to justify.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'left', 'right', 'center', 'justify', 'start', 'end', 'initial', 'inherit']
            }
        ]
    },
    textDecoration: {
        id: "114",
        definition: "The text-decoration property specifies the decoration added to text.", 
        version: "1.0 | 3.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'underline', 'overline', 'line-through', 'initial', 'inherit']
            }
        ]
    },
    textDecorationLine: {
        id: "115",
        definition: "The text-decoration-line property specifies what type of line, if any, the decoration will have.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'underline', 'overline', 'line-through', 'initial', 'inherit']
            }
        ]
    },
    textDecorationStyle: {
        id: "116",
        definition: "The text-decoration-style property specifies how the line, if any, will display.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['solid', 'double', 'dotted', 'dashed', 'wavy', 'initial', 'inherit                 ']
            }
        ]
    },
    textDecorationColor: {
        id: "117",
        definition: "The text-decoration-color property specifies the color of the text-decoration (underlines, overlines, linethroughs).", 
        version: "3.0",
        syntax: {
            "color": [
                {
                    type: 'color_code',
                    values: ['#000000']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    textDecorationSkip: {
        id: "118",
        definition: "The text-decoration-skip CSS property specifies what parts of the elementâs content any text decoration affecting the element must skip over. ", 
        version: "3.0",
        syntax: {
            "single keyword": [
                {
                    type: 'string',
                    values: ['none', 'objects', 'edges', 'spaces', 'inherit', 'initial', 'unset']
                }
            ],
            "multiple keywords": [
                {
                    type: 'string',
                    values: ['spaces', 'objects', 'leading-spaces', 'trailing-spaces', 'edges', 'box-decoration']
                },
                {
                    type: 'string',
                    values: ['spaces', 'objects', 'leading-spaces', 'trailing-spaces', 'edges', 'box-decoration']
                }
            ]
        }
    },
    textUnderlinePosition: {
        id: "119",
        definition: "The text-underline-position CSS property specifies the position of the underline which is set using the text-decoration property's underline value.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'under', 'left', 'right', 'initial', 'inherit', 'unset']
            }
        ]
    },
    textIndent: {
        id: "120",
        definition: "The text-indent property specifies the indentation of the first line in a text-block.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    textRendering: {
        id: "121",
        definition: "The text-rendering CSS property provides information to the rendering engine about what to optimize for when rendering text.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'optimizeSpeed', 'optimizeLegibility', 'geometricPrecision', 'inherit', 'initial', 'unset']
            }
        ]
    },
    textShadow: {
        id: "122",
        definition: "The text-shadow property adds shadow to text.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['h-shadow', 'v-shadow', 'blur-shadow']
                }
            ],
            "color": [
                {
                    type: 'color_code',
                    values: ['#000000']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['none', 'initial', 'inherit']
                }
            ]
        }
    },
    textSizeAdjust: {
        id: "123",
        definition: "The text-size-adjust property allows control over the text inflation algorithm used on some mobile devices. ", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['none', 'auto', 'initial', 'inherit', 'unset']
                }
            ]
        }
    },
    textOverflow: {
        id: "124",
        definition: "The text-overflow property specifies how overflowed content that is not displayed should be signaled to the user.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['clip', 'ellipsis', 'string', 'initial', 'inherit']
            }
        ]
    },
    textTransform: {
        id: "125",
        definition: "The text-transform property controls the capitalization of text.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'capitalize', 'uppercase', 'lowercase', 'initial', 'inherit']
            }
        ]
    },
    top: {
        id: "126",
        definition: "For relatively positioned elements, the top property sets the top edge of an element to a unit above/below its normal position.", 
        version: "2.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    touchAction: {
        id: "127",
        definition: "The touch-action CSS property specifies whether, and in what ways, a given region can be manipulated by the user via a touchscreen", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'none', 'pan-x', 'pan-left', 'pan-right', 'pan-y', 'pan-up', 'pan-down', 'pinch-zoom', 'manipulation', 'inherit', 'initial', 'unset']
            }
        ]
    },
    transitionDelay: {
        id: "128",
        definition: "The transition-delay property specifies when the transition effect will start.", 
        version: "3.0",
        syntax: {
            "time": [
                {
                    type: 'time',
                    values: ['time in seconds or milliseconds']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    transitionDuration: {
        id: "129",
        definition: "The transition-duration property specifies how many seconds (s) or milliseconds (ms) a transition effect takes to complete.", 
        version: "3.0",
        syntax: {
            "time": [
                {
                    type: 'time',
                    values: ['time in seconds or milliseconds']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    transitionProperty: {
        id: "130",
        definition: "The transition-property property specifies the name of the CSS property the transition effect is for (the transition effect will start when the specified CSS property changes).", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'all', 'property', 'initial', 'inherit']
            }
        ]
    },
    transitionTimingFunction: {
        id: "131",
        definition: "The transition-timing-function property specifies the speed curve of the transition effect.", 
        version: "3.0",
        syntax: [
                {
                    type: 'string',
                    values: ['linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out', 'step-start', 'step-end', 'steps(int,start, end)', 'cubic-bezier(n,n,n,n)', 'initial', 'inherit']
                }
        ]
    },
    unicodeBidi: {
        id: "132",
        definition: "The unicode-bidi property is used together with the direction property to set or return whether the text should be overridden to support multiple languages in the same document.", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'embed', 'bidi-override', 'initial', 'inherit']
            }
        ]
    },
    verticalAlign: {
        id: "133",
        definition: "The vertical-align property sets the vertical alignment of an element.", 
        version: ".0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['baseline', 'sub', 'super', 'top', 'text-top', 'middle', 'bottom', 'text-bottom', 'initial', 'inherit']
                }
            ]
        }
    },
    visibility: {
        id: "134",
        definition: "The visibility property specifies whether or not an element is visible.", 
        version: "2.0",
        syntax: [
            {
                type: 'string',
                values: ['visible', 'hidden', 'collapse', 'initial', 'inherit']
            }
        ]
    },
    whiteSpace: {
        id: "135",
        definition: "The white-space property specifies how white-space inside an element is handled.", 
        version: "1.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'nowrap', 'pre', 'pre-line', 'pre-wrap', 'initial', 'inherit']
            }
        ]
    },
    widows: {
        id: "136",
        definition: "The widows CSS property specifies the minimum number of lines in a block container that must be shown at the top of a page, region, or column. This property is normally used to control how breaks occur.", 
        version: ".0",
        syntax: [
            {
                type: 'number',
                values: ['integer']
            }
        ]
    },
    width: {
        id: "137",
        definition: "The width property sets the width of an element.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    willChange: {
        id: "138",
        definition: "The will-change CSS property provides a way for authors to hint browsers about the kind of changes to be expected on an element, so that the browser can set up appropriate optimizations ahead of time before the element is actually changed.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'scroll-position', 'contents', 'transform', 'opacity', 'inherit', 'initial', 'unset', 'left', 'top']
            }
        ]
    },
    wordBreak: {
        id: "139",
        definition: "The word-break property specifies line breaking rules for non-CJK scripts.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'break-all', 'keep-all', 'initial', 'inherit']
            }
        ]
    },
    wordSpacing: {
        id: "140",
        definition: "The word-spacing property increases or decreases the white space between words.", 
        version: "1.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['normal', 'initial', 'inherit']
                }
            ]
        }
    },
    wordWrap: {
        id: "141",
        definition: "The word-wrap property allows long words to be able to be broken and wrap onto the next line.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'break-word', 'initial', 'inherit']
            }
        ]
    },
    zIndex: {
        id: "142",
        definition: "The z-index property specifies the stack order of an element.", 
        version: "2.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['number']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    zoom: {
        id: "143",
        definition: "The zoom CSS Descriptor sets the initial zoom factor of a document defined by @viewport.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['number', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto']
                }
            ]
        }
    },
    backfaceVisibility: {
        id: "145",
        definition: "The backface-visibility property defines whether or not the back face of an element should be visible when facing the user.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['visible', 'hidden', 'initial', 'inherit']
            }
        ]
    },
    columnCount: {
        id: "161",
        definition: "The column-count property specifies the number of columns an element should be divided into.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['number']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    columnGap: {
        id: "162",
        definition: "The column-gap property specifies the gap between the columns.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['normal', 'initial', 'inherit']
                }
            ]
        }
    },
    columnRuleColor: {
        id: "163",
        definition: "The column-rule-color property specifies the color of the rule between columns.", 
        version: "3.0",
        syntax: {
            "color": [
                {
                    type: 'color_code',
                    values: ['#000000']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    columnRuleStyle: {
        id: "164",
        definition: "The column-rule-style property specifies the style of the rule between columns.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'initial', 'inherit']
            }
        ]
    },
    columnRuleWidth: {
        id: "165",
        definition: "The column-rule-width property specifies the width of the rule between columns.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['medium', 'thin', 'thick', 'initial', 'inherit']
                }
            ]
        }
    },
    columnSpan: {
        id: "166",
        definition: "The column-span property specifies how many columns an element should span across.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'all', 'initial', 'inherit']
            }
        ]
    },
    columnWidth: {
        id: "167",
        definition: "The column-width property specifies a suggested, optimal width for the columns.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    alignContent: {
        id: "168",
        definition: "The align-content property modifies the behavior of the flex-wrap property. It is similar to align-items, but instead of aligning flex items, it aligns flex lines.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['stretch', 'center', 'flex-start', 'space-between', 'space-around', 'initial', 'inherit']
            }
        ]
    },
    alignItems: {
        id: "169",
        definition: "The align-items property specifies the default alignment for items inside the flexible container.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['stretch', 'center', 'flex-start', 'baseline', 'initial', 'inherit']
            }
        ]
    },
    alignSelf: {
        id: "170",
        definition: "The align-self property specifies the alignment for the selected item inside the flexible container.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'stretch', 'center', 'flex-start', 'flex-end', 'baseline', 'initial', 'inherit']
            }
        ]
    },
    flexBasis: {
        id: "171",
        definition: "The flex-basis property specifies the initial length of a flexible item.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['number']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'initial', 'inherit']
                }
            ]
        }
    },
    flexGrow: {
        id: "172",
        definition: "The flex-grow property specifies how much the item will grow relative to the rest of the flexible items inside the same container.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['number']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    flexShrink: {
        id: "173",
        definition: "The flex-shrink property specifies how the item will shrink relative to the rest of the flexible items inside the same container.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['number']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    flexDirection: {
        id: "174",
        definition: "The flex-direction property specifies the direction of the flexible items.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['row', 'row-reverse', 'column', 'column-reverse', 'initial', 'inherit']
            }
        ]
    },
    flexWrap: {
        id: "175",
        definition: "The flex-wrap property specifies whether the flexible items should wrap or not.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['nowrap', 'wrap', 'wrap-reverse', 'initial', 'inherit']
            }
        ]
    },
    justifyContent: {
        id: "176",
        definition: "The justify-content property aligns the flexible container's items when the items do not use all available space on the main-axis (horizontally).", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'initial', 'inherit']
            }
        ]
    },
    gridAutoColumns: {
        id: "178",
        definition: "The grid-auto-columns property sets a size for the columns in a grid container.", 
        version: "CSS Grid Layout Module Level 1",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'max-content', 'min-content', 'length']
            }
        ]
    },
    gridAutoFlow: {
        id: "179",
        definition: "The grid-auto-flow property controls how auto-placed items get inserted in the grid.", 
        version: "CSS Grid Layout Module Level 1",
        syntax: [
            {
                type: 'string',
                values: ['row', 'column', 'row-dense', 'column-dense']
            }
        ]
    },
    gridAutoRows: {
        id: "180",
        definition: "The grid-auto-rows property sets a size for the rows in a grid container.", 
        version: "CSS Grid Layout Module Level 1",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'max-content', 'min-content']
                }
            ]
        }
    },
    gridColumnEnd: {
        id: "181",
        definition: "The grid-column-end property defines how many columns an item will span, or on which column-line the item will end (see example at the end of this page).", 
        version: "CSS Grid Layout Module Level 1",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['span n', 'column-line']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto']
                }
            ]
        }
    },
    gridColumnStart: {
        id: "182",
        definition: "The grid-column-start property defines on which column-line the item will start.", 
        version: "CSS Grid Layout Module Level 1",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['column-line']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto']
                }
            ]
        }
    },
    gridTemplateAreas: {
        id: "183",
        definition: "The grid-template-areas property specifies how to display the grid layout.", 
        version: "CSS Grid Layout Module Level 1",
        syntax: [
            {
                type: 'string',
                values: ['none', 'itemnames']
            }
        ]
    },
    gridTemplateColumns: {
        id: "184",
        definition: "The grid-template-columns property specifies the number of columns in a grid layout, it can also specify the size (width) of each column.", 
        version: "CSS Grid Layout Module Level 1",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['max-content', 'min-content', 'length']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['none', 'auto', 'initial', 'inherit']
                }
            ]
        }
       
    },
    gridTemplateRows: {
        id: "185",
        definition: "The grid-template-rows property specifies the size (height) of the rows in a grid layout.", 
        version: "CSS Grid Layout Module Level 1",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['max-content', 'min-content', 'length']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['none', 'auto']
                }
            ]
        }
    },
    gridRowEnd: {
        id: "186",
        definition: "The grid-row-end property defines how many rows an item will span, or on which row-line the item will end (see example at the end of this page).", 
        version: "CSS Grid Layout Module Level 1",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['span n', 'column-line']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto']
                }
            ]
        }
    },
    gridRowStart: {
        id: "187",
        definition: "The grid-row-start property defines on which row-line the item will start.", 
        version: "CSS Grid Layout Module Level 1",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['row-line']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto']
                }
            ]
        }
    },
    gridColumnGap: {
        id: "188",
        definition: "The grid-column-gap property defines the size of the gap between the columns in a grid layout.",
        syntax: [
            {
                type: 'number',
                values: ['length']
            }
        ]
    },
    gridRowGap: {
        id: "189",
        definition: "The grid-row-gap property defines the size of the gap between the rows in a grid layout.", 
        version: "CSS Grid Layout Module Level 1",
        syntax: [
            {
                type: 'number',
                values: ['length']
            }
        ]
    },
    hyphens: {
        id: "191",
        definition: "The hyphens CSS property specifies how words should be hyphenated when text wraps across multiple lines.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['none', 'manual', 'auto', 'inherit', 'initial', 'unset']
            }
        ]
    },
    order: {
        id: "211",
        definition: "The order property specifies the order of a flexible item relative to the rest of the flexible items inside the same container.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['number']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    perspective: {
        id: "212",
        definition: "The perspective property defines how many pixels a 3D element is placed from the view. This property allows you to change the perspective on how 3D elements are viewed.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', 'none']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    perspectiveOrigin: {
        id: "213",
        definition: "The perspective-origin property defines where a 3D element is based in the x- and the y-axis. This property allows you to change the bottom position of 3D elements.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                },
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "position": [
                {
                    type: 'position',
                    values: ['left', 'center', 'right']
                },
                {
                    type: 'position',
                    values: ['top', 'center', 'bottom']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    shapeOutside: {
        id: "216",
        definition: "The shape-outside CSS property defines a shape around which inline content should wrap.", 
        version: "3.0",
        syntax: {
            "url": [
                {
                    type: 'url',
                    values: ['url']
                }
            ],
            "functions": [
                {
                    type: 'function',
                    values: ['circle()', 'ellipse()', 'inset()', 'polygon()']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['none', 'margin-box', 'content-box', 'border-box', 'padding-box', 'initial', 'inherit', 'unset']
                }
            ]
        }
    },
    shapeImageThreshold: {
        id: "217",
        definition: "The shape-image-threshold CSS property defines the alpha channel threshold used to extract the shape using an image as the value for shape-outside.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['number']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit', 'unset']
                }
            ]
        }
    },
    shapeMargin: {
        id: "218",
        definition: "The shape-margin CSS property adds a margin to shape-outside.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit', 'unset']
                }
            ]
        }
    },
    transform: {
        id: "230",
        definition: "The transform property applies a 2D or 3D transformation to an element. This property allows you to rotate, scale, move, skew, etc., elements.", 
        version: "3.0",
        syntax: {
            "functions": [
                {
                    type: 'function',
                    values: ['matrix()', 'matrix3d()', 'translate()', 'translate3d()', 'translateX()', 'translateY()', 'translateZ()', 'scale()', 'scale3d()', 'scaleX()', 'scaleY()', 'scaleZ()', 'rotate()', 'rotate3d()', 'rotateX()', 'rotateY()', 'rotateZ()', 'skew()', 'skewX()', 'skewY()', 'perspective()']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit', 'none']
                }
            ]
        }
    },
    transformOrigin: {
        id: "231",
        definition: "The transform-origin property allows you to change the position of transformed elements.", 
        version: "3.0",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                },
                {
                    type: 'number',
                    values: ['length', '%']
                },
                {
                    type: 'number',
                    values: ['length']
                }
            ],
            "position": [
                {
                    type: 'position',
                    values: ['left', 'center', 'right']
                },
                {
                    type: 'position',
                    values: ['top', 'center', 'bottom']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    transformStyle: {
        id: "232",
        definition: "The transform-style property specifies how nested elements are rendered in 3D space.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['flat', 'preserve-3d', 'initial', 'inherit']
            }
        ]
    },
    userSelect: {
        id: "235",
        definition: "The user-select property specifies whether the text of an element can be selected.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'none', 'text', 'all']
            }
        ]
    },
    bufferedRendering: {
        id: "238",
        definition: "SVG content providers can use this property to provide a hint to the implementation about how often an element is modified so it can make better speed vs. memory trade-offs.", 
        version: "SVG",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'dynamic', 'static']
            }
        ]
    },
    clipPath: {
        id: "239",
        definition: "The clip-path CSS property creates a clipping region that defines what part of an element should be displayed.", 
        version: "SVG",
        syntax: {
            "functions": [
                {
                    type: 'function',
                    values: ['inset()', 'circle()', 'polygon()']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['url', 'fill-box', 'stroke-box', 'view-box', 'margin-box', 'border-box', 'padding-box', 'content-box', 'none', 'initial', 'inherit', 'unset']
                }
            ]
        }
    },
    clipRule: {
        id: "240",
        definition: "The clip-rule attribute only applies to graphics elements that are contained within a <clipPath> element.", 
        version: "SVG",
        syntax: [
            {
                type: 'string',
                values: ['nonzero', 'evenodd', 'inherit']
            }
        ]
    },
    mask: {
        id: "241",
        definition: "The mask CSS property alters the visibility of an element by either partially or fully hiding it.", 
        version: "SVG",
        syntax: {
            "image": [
                {
                    type: 'image',
                    values: ['url()']
                }
            ],
            "combined": [
                {
                    type: 'combined',
                    values: ['url()']
                },
                {
                    type: 'combined',
                    values: ['luminance', 'px px', 'px px px', 'repeat-x', 'stroke-box', 'exclude']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['none', 'initial', 'inherit', 'unset']
                }
            ]
        }
    },
    filter: {
        id: "242",
        definition: "The filter property defines visual effects (like blur and saturation) to an element (often <img>).", 
        version: "SVG",
        syntax: {
            "functions": [
                {
                    type: 'function',
                    values: ['blur()', 'brightness()', 'contrast()', 'drop-shadow()', 'grayscale()', 'hue-rotate()', 'invert()', 'opacity()', 'saturate()', 'sepia()', 'url()']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['none', 'initial', 'inherit', 'unset']
                }
            ]
        }
    },
    floodColor: {
        id: "243",
        definition: "The flood-color attribute indicates what color to use to flood the current filter primitive subregion defined through the <feFlood> element. ", 
        version: "SVG",
        syntax: {
            "color": [
                {
                    type: 'color',
                    values: ['currentColor', '<color>', '<iccolor>']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['inherit']
                }
            ]
        }
    },
    floodOpacity: {
        id: "244",
        definition: "The flood-opacity attribute indicates the opacity value to use across the current filter primitive subregion defined through the <feFlood> element.", 
        version: "SVG",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['<opacity value>']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['inherit']
                }
            ]
        }
    },
    lightingColor: {
        id: "245",
        definition: "The lighting-color attribute defines the color of the light source for filter primitives elements <feDiffuseLighting> and <feSpecularLighting>.", 
        version: "SVG",
        syntax: {
            "color": [
                {
                    type: 'color',
                    values: ['currentColor', '<color>', '<iccolor>']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['inherit']
                }
            ]
        }
    },
    stopColor: {
        id: "246",
        definition: "The stop-color attribute indicates what color to use at that gradient stop.", 
        version: "SVG",
        syntax: {
            "color": [
                {
                    type: 'color',
                    values: ['currentColor', '<color>', '<iccolor>']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['inherit']
                }
            ]
        }
    },
    stopOpacity: {
        id: "247",
        definition: "The stop-opacity attribute defines the opacity of a given gradient stop.", 
        version: "SVG",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['<opacity-value>']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['inherit']
                }
            ]
        }
    },
    colorInterpolation: {
        id: "248",
        definition: "The color-interpolation attribute specifies the color space for gradient interpolations, color animations, and alpha compositing.", 
        version: "SVG",
        syntax: {
            "color": [
                {
                    type: 'color',
                    values: ['sRGB', 'linearRGB']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'inherit']
                }
            ]
        }
    },
    colorInterpolationFilters: {
        id: "249",
        definition: "The color-interpolation-filters attribute specifies the color space for imaging operations performed via filter effects.", 
        version: "SVG",
        syntax: {
            "color": [
                {
                    type: 'color',
                    values: ['sRGB', 'linearRGB']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'inherit']
                }
            ]
        }
    },
    colorRendering: {
        id: "250",
        definition: "The color-rendering attribute provides a hint to the SVG user agent about how to optimize its color interpolation and compositing operations.", 
        version: "SVG",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'optimizeSpeed', 'optimizeQuality', 'inherit']
            }
        ]
    },
    fill: {
        id: "251",
        definition: " The fill attribute can be used to maintain the value of an animation after the active duration of an animation element ends.", 
        version: "SVG",
        syntax: [
            {
                type: 'string',
                values: ['remove', 'freeze']
            }
        ]
    },
    fillOpacity: {
        id: "252",
        definition: "This attribute specifies the opacity of the color or the content the current object is filled with.", 
        version: "SVG",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['<opacity-value>']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['inherit']
                }
            ]
        }
    },
    fillRule: {
        id: "253",
        definition: "The fill-rule attribute indicates how to determine what side of a path is inside a shape, to determine how the fill property paints the shape. ", 
        version: "SVG",
        syntax: [
            {
                type: 'string',
                values: ['nonzero', 'evenodd', 'inherit']
            }
        ]
    },
    markerEnd: {
        id: "254",
        definition: "The marker-end defines the arrowhead or polymarker that will be drawn at the final vertex of the given <path> element or basic shape.", 
        version: "SVG",
        syntax: {
            "function": [
                {
                    type: 'function',
                    values: ['<funcri>']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['none', 'inherit']
                }
            ]
        }
    },
    markerMid: {
        id: "255",
        definition: "The marker-mid defines the arrowhead or polymarker that shall be drawn at every vertex other than the first and last vertex of the given <path> element or basic shape.", 
        version: "SVG",
        syntax: {
            "function": [
                {
                    type: 'function',
                    values: ['<funcri>']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['none', 'inherit']
                }
            ]
        }
    },
    markerStart: {
        id: "256",
        definition: "The marker-start attribute defines the arrowhead or polymarker that will be drawn at the first vertex of the given <path> element or basic shape.", 
        version: "SVG",
        syntax: {
            "function": [
                {
                    type: 'function',
                    values: ['<funcri>']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['none', 'inherit']
                }
            ]
        }
    },
    maskType: {
        id: "257",
        definition: "The CSS mask-type property defines if a mask defined by an SVG <mask> element is used as a luminance or an alpha mask. ", 
        version: "SVG",
        syntax: [
            {
                type: 'string',
                values: ['luminance', 'alpha', 'inherit', 'initial', 'unset']
            }
        ]
    },
    shapeRendering: {
        id: "258",
        definition: "The shape-rendering property provides a hint about what tradeoffs to make as the browser renders <path> element or basic shapes", 
        version: "SVG",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'optimizeSpeed', 'crispEdges', 'geometricPrecision', 'inherit']
            }
        ]
    },
    stroke: {
        id: "259",
        definition: "The stroke property in CSS is for adding a border to SVG shapes.", 
        version: "SVG",
        syntax: [
            {
                type: 'color',
                values: ['color_code']
            }
        ]
    },
    strokeDasharray: {
        id: "260",
        definition: "the stroke-dasharray attribute controls the pattern of dashes and gaps used to stroke paths.", 
        version: "SVG",
        syntax: [
            {
                type: 'string',
                values: ['none', '<dasharray>', 'inherit']
            }
        ]
    },
    strokeDashoffset: {
        id: "261",
        definition: "The stroke-dashoffset property in CSS defines the location along an SVG path where the dash of a stroke will begin. The higher the number, the further along the path the dashes will begin.", 
        version: "SVG",
        syntax: [
            {
                type: 'number',
                values: ['length', '%']
            }
        ]
    },
    strokeLinecap: {
        id: "262",
        definition: "The stroke-linecap property in CSS is for setting the starting and ending points of a border on SVG shapes.", 
        version: "SVG",
        syntax: [
            {
                type: 'string',
                values: ['butt', 'square', 'round']
            }
        ]
    },
    strokeLinejoin: {
        id: "263",
        definition: "The stroke-linejoin attribute specifies the shape to be used at the corners of paths or basic shapes when they are stroked.", 
        version: "SVG",
        syntax: [
            {
                type: 'string',
                values: ['miter', 'round', 'bevel', 'inherit']
            }
        ]
    },
    strokeMiterlimit: {
        id: "264",
        definition: "When two line segments meet at a sharp angle and miter joins have been specified for stroke-linejoin, it is possible for the miter to extend far beyond the thickness of the line stroking the path. The stroke-miterlimit imposes a limit on the ratio of the miter length to the stroke-width. When the limit is exceeded, the join is converted from a miter to a bevel.", 
        version: "SVG",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['<miterlimit>']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['inherit']
                }
            ]
        }
    },
    strokeOpacity: {
        id: "265",
        definition: "the stroke-opacity attribute specifies the opacity of the outline on the current object. ", 
        version: "SVG",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['<opacity-value>']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['inherit']
                }
            ]
        }
    },
    strokeWidth: {
        id: "266",
        definition: "The stroke-width property in CSS is for setting the width of a border on SVG shapes.", 
        version: "SVG",
        syntax: [
            {
                type: 'number',
                values: ['number']
            }
        ]
    },
    alignmentBaseline: {
        id: "267",
        definition: "The alignment-baseline attribute specifies how an object is aligned with respect to its parent.", 
        version: "SVG",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'baseline', 'before-edge', 'text-before-edge', 'middle', 'central', 'after-edge', 'text-after-edge', 'ideographic', 'alphabetic', 'hanging', 'mathematical', 'inherit']
            }
        ]
    },
    baselineShift: {
        id: "268",
        definition: "The baseline-shift attribute allows repositioning of the dominant-baseline relative to the dominant-baseline of the parent text content element. The shifted object might be a sub- or superscript.", 
        version: "SVG",
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['%', 'length']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto', 'baseline', 'super', 'sub', 'inherit']
                }
            ]
        }
    },
    dominantBaseline: {
        id: "269",
        definition: "The dominant-baseline property is used to determine or re-determine a scaled-baseline-table.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'use-script', 'no-change', 'reset-size', 'alphabetic', 'hanging', 'ideographic', 'mathematical', 'central', 'middle', 'text-after-edge', 'text-before-edge']
            }
        ]
    },
    textAnchor: {
        id: "270",
        definition: "The text-anchor attribute is used to align (start-, middle- or end-alignment) a string of text relative to a given point.", 
        version: "SVG",
        syntax: [
            {
                type: 'string',
                values: ['start', 'middle', 'end', 'inherit']
            }
        ]
    },
    writingMode: {
        id: "271",
        definition: "The writing-mode property changes the alignment of the text so that it can be read from top to bottom or from left to right, depending on the language.", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['horizontal-tb', 'vertical-rl', 'vertical-lr']
            }
        ]
    },
    vectorEffect: {
        id: "272",
        definition: "The vectorEffect element defines a transformation of a primitive shape's outline that happens before it is drawn. ", 
        version: "SVG",
        syntax: [
            {
                type: 'string',
                values: ['non-scaling-stroke']
            }
        ]
    },
    paintOrder: {
        id: "273",
        definition: "The paint-order attribute specifies the order that the fill, stroke, and markers of a given shape or text element are painted.", 
        version: "SVG",
        syntax: [
            {
                type: 'string',
                values: ['normal', 'fill', 'stroke', 'markers', 'inherit']
            }
        ]
    },
    d: {
        id: "274",
        definition: "This attribute defines a path to follow. The d attribute is a string containing a series of path descriptions. ", 
        version: "SVG",
        syntax: [
            {
                type: 'instruction',
                values: ['moveto', 'lineto', 'curveto', 'arcto', 'closepath']
            }
        ]
    },
    cx: {
        id: "275",
        definition: "For the <circle> and the <ellipse> element, this attribute defines the x-axis coordinate of the center of the element.", 
        version: "SVG",
        syntax: [
            {
                type: 'instruction',
                values: ['<coordinate>']
            }
        ]
    },
    cy: {
        id: "276",
        definition: "For the <circle> and the <ellipse> element, this attribute define the y-axis coordinate of the center of the element. For the <radialGradient> element, this attribute define the y-axis coordinate of the largest (i.e., outermost) circle for the radial gradient. ", 
        version: "SVG",
        syntax: [
            {
                type: 'instruction',
                values: ['<coordinate>']
            }
        ]
    },
    x: {
        id: "277",
        definition: "This attribute indicates an x-axis coordinate in the user coordinate system.", 
        version: "SVG",
        syntax: [
            {
                type: 'instruction',
                values: ['<coordinate>']
            }
        ]
    },
    y: {
        id: "278",
        definition: "The y attribute indicates a y-axis coordinate in the current SVG coordinate system.", 
        version: "SVG",
        syntax: [
            {
                type: 'instruction',
                values: ['<coordinate>']
            }
        ]
    },
    r: {
        id: "279",
        definition: "For the <circle> this attribute defines the radius of the element. A value of zero disables rendering of the circle. For the <radialGradient> element, this attribute defines the radius of the largest (i.e., outermost) circle for the radial gradient.", 
        version: "SVG",
        syntax: [
            {
                type: 'number',
                values: ['number']
            }
        ]
    },
    rx: {
        id: "280",
        definition: "For the <ellipse> element, this attribute defines the x-radius of the element. A value of zero disables rendering of the element. For the <rect> element, this attribute defines the x-axis radius of the ellipse used to round off the corners of the rectangle.", 
        version: "SVG",
        syntax: [
            {
                type: 'number',
                values: ['length']
            }
        ]
    },
    ry: {
        id: "281",
        definition: "For the <ellipse> element, this attribute defines the y-radius of the element. A value of zero disables rendering of the element. For the <rect> element, this attribute defines the y-axis radius of the ellipse used to round off the corners of the rectangle.", 
        version: "SVG",
        syntax: [
            {
                type: 'number',
                values: ['length']
            }
        ]
    },
    caretColor: {
        id: "282",
        definition: "The caret-color property specifies the color of the cursor (caret) in inputs, textareas, or any element that is editable.", 
        version: "3.0",
        syntax: {
            "color": [
                {
                    type: 'color_code',
                    values: ['#000000']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['auto']
                }
            ]
        }
    },
    lineBreak: {
        id: "283",
        definition: "The line-break CSS property is used to specify how (or if) to break lines when working with punctuation and symbols. This only affects text in Chinese, Japanese, or Korean (CJK).", 
        version: "3.0",
        syntax: [
            {
                type: 'string',
                values: ['auto', 'loose', 'normal', 'strict', 'inherit', 'initial', 'unset']
            }
        ]
    },
    appearance: {
        id: "144",
        definition: "The 'appearance' CSS property is used in Gecko (Firefox) to display an element using platform-native styling based on the operating system's theme.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-"],
        syntax: [
            {
                type: 'string',
                values: ['none', 'button', 'checkbox', 'scrollbarbutton-up']
            }
        ]
    },
    backgroundClip: {
        id: "146",
        definition: "The background-clip property defines how far the background (color or image) should extend within an element.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: ['border-box', 'padding-box', 'content-box', 'text', 'inherit', 'initial', 'unset']
            }
        ]
    },
    backgroundOrigin: {
        id: "147",
        definition: "The background-origin CSS property sets the background positioning area, i.e., the origin position of an image specified using the background-image property.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: ['border-box', 'padding-box', 'content-box', 'inherit', 'initial', 'unset']
            }
        ]
    },
    borderHorizontalSpacing: {
        id: "148",
        definition: "Defines the spacing between the horizontal portion of an element's border and the content within. Equivalent to the horizontal portion of the border-spacing property. Changes to this property can be animated.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'number',
                values: ['<spacing>']
            }
        ]
    },
    borderImage: {
        id: "149",
        definition: "The border-image property allows you to specify an image to be used as the border around an element.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['border-image-width']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['border-image-source', 'border-image-slice', 'border-image-outset', 'border-image-repeat', 'initial', 'inherit']
                }
            ]
        }
    },
    borderSpacing: {
        id: "150",
        definition: "Specifies the alignment of nested elements within an outer flexible box element.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length length']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit']
                }
            ]
        }
    },
    boxAlign: {
        id: "151",
        definition: "Specifies the alignment of nested elements within an outer flexible box element.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: ['baseline', 'center', 'end', 'start', 'stretch']
            }
        ]
    },
    boxDecorationBreak: {
        id: "152",
        definition: "The box-decoration-break CSS property specifies how the background, padding, border, border-image, box-shadow, margin, and clip-path of an element are applied when the box for the element is fragmented.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: ['slice', 'clone', 'initial', 'inherit', 'unset']
            }
        ]
    },
    boxDecoration: {
        id: "153",
        definition: "The box-direction CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).", 
        version: ".0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: ['normal', 'reverse', 'inherit', 'initial', 'unset']
            }
        ]
    },
    boxFlex: {
        id: "154",
        definition: "The -moz-box-flex and -webkit-box-flex CSS properties specify how a -moz-box or -webkit-box grows to fill the box that contains it, in the direction of the containing box's layout.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-"],
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['number']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit', 'unset']
                }
            ]
        }
    },
    boxFlexGroup: {
        id: "155",
        definition: "The box-flex-group CSS property assigns the flexbox's child elements to a flex group.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'number',
                values: ['<integer>']
            }
        ]
    },
    boxLines: {
        id: "156",
        definition: "The box-lines CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: ['single', 'multiple', 'inherit', 'initial', 'unset']
            }
        ]
    },
    boxOrdinalGroup: {
        id: "157",
        definition: "The box-ordinal-group CSS property assigns the flexbox's child elements to an ordinal group.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['number']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['initial', 'inherit', 'unset']
                }
            ]
        }
    },
    boxOrient: {
        id: "158",
        definition: "The box-orient CSS property specifies whether an element lays out its contents horizontally or vertically.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: ['horizontal', 'vertical', 'inline-axis', 'block-axis', 'inherit', 'initial', 'unset']
            }
        ]
    },
    boxPack: {
        id: "159",
        definition: "The -moz-box-pack and -webkit-box-pack CSS properties specify how a -moz-box or -webkit-box packs its contents in the direction of its layout.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: ['start', 'center', 'end', 'justify', 'inherit', 'initial', 'unset']
            }
        ]
    },
    boxReflect: {
        id: "160",
        definition: "The -webkit-box-reflect CSS property lets you reflect the content of an element in one specific direction.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['offset']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['above', 'below', 'left', 'right', 'initial', 'inherit', 'unset']
                }
            ]
        }
    },
    fontSmoothing: {
        id: "177",
        definition: "This CSS property controls the application of anti-aliasing when fonts are rendered.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: ['none', 'antialiased', 'subpixel-antialiased']
            }
        ]
    },
    tapHighlightColor: {
        id: "190",
        definition: "-webkit-tap-highlight-color is a non-standard CSS property that sets the color of the highlight that appears over a link while it's being tapped.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'color',
                values: ['color_value']
            }
        ]
    },
    hyphenateCharacter: {
        id: "192",
        definition: "This property processes the text content, performing hyphenation and adds soft hyphens. ", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: ['hyphen character code']
            }
        ]
    },
    lineBreak: {
        id: "193",
        definition: "The line-break CSS property is used to specify how (or if) to break lines when working with punctuation and symbols. This only affects text in Chinese, Japanese, or Korean (CJK).", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: ['auto', 'loose', 'normal', 'strict', 'inherit', 'initial', 'unset']
            }
        ]
    },
    lineClamp: {
        id: "194",
        definition: "The property is used to truncate lines", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'number',
                values: ['number']
            }
        ]
    },
    locale: {
        id: "195",
        definition: "NA", 
        version: "3.0",
        prefixes: ["-webkit-"],
        syntax: [
            {
                type: 'string',
                values: ['NA']
            }
        ]
    },
    marginTopCollapse: {
        id: "196",
        definition: "Specifies whether the top and bottom margins can be shared between adjacent elements.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['none', 'uri', 'gradient', 'repeat', 'stretch', 'round']
                }
            ]
        }
    },
    marginBottomCollapse: {
        id: "197",
        definition: "Specifies whether the top and bottom margins can be shared between adjacent elements.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: ['collapse', 'discard', 'separate', 'inherit']
            }
        ]
    },
    maskBoxImage: {
        id: "198",
        definition: "-webkit-mask-box-image sets the mask image for an element's border box.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: []
            }
        ]
    },
    maskClip: {
        id: "204",
        definition: "The mask-clip CSS property determines the area, which is affected by a mask. The painted content of an element must be restricted to this area.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: ['content-box', 'padding-box', 'border-box', 'margin-box', 'fill-box', 'stroke-box', 'view-box', 'no-clip', 'border', 'padding', 'content', 'text', 'inherit', 'initial', 'unset']
            }
        ]
    },
    maskComposite: {
        id: "205",
        definition: "The -webkit-mask-composite property specifies the manner in which multiple mask images applied to the same element are composited with one another.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: ['clear', 'copy', ,'source-over', 'source-in', 'source-out', 'source-atop', 'destination-over', 'destination-in', 'destination-out', 'destination-atop', 'xor', 'initial', 'inherit', 'unset']
            }
        ]
    },
    maskImage: {
        id: "206",
        definition: "The mask-image CSS property sets the image that is used as mask layer for an element.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: {
            "values": [
                {
                    type: 'image values',
                    values: ['linear-gradient()', 'image()']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['none', 'initial', 'inherit']
                }
            ]
        }
    },
    maskOrigin: {
        id: "207",
        definition: "The mask-origin CSS property determines the origin of a mask.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: ['content-box', 'padding-box', 'border-box', 'margin-box', 'fill-box', 'stroke-box', 'view-box', 'no-clip', 'border', 'padding', 'content', 'text', 'inherit', 'initial', 'unset']
            }
        ]
    },
    maskPosition: {
        id: "208",
        definition: "The mask-position CSS property sets the initial position, relative to the mask position layer defined by mask-origin for each defined mask image.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['top', 'bottom', 'left', 'right', 'center', 'inherit', 'initial', 'unset']
                }
            ]
        }
    },
    maskRepeat: {
        id: "209",
        definition: "The mask-repeat CSS property defines how mask images are repeated.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: ['repeat-x', 'repeat-y', 'repeat', 'space', 'round', 'no-repeat', 'inherit', 'initial', 'unset']
            }
        ]
    },
    maskSize: {
        id: "210",
        definition: "The mask-size CSS property specifies the sizes of the mask images. ", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length', '%']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['cover', 'contain', 'auto', 'inherit', 'initial', 'unset']
                }
            ]
        }
    },
    printColorAdjust: {
        id: "214",
        definition: "The -webkit-print-color-adjust property is a non-standard CSS extension that can be used to force printing of background colors and images in browsers based on the WebKit engine.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: ['economy', 'exact', 'inherit', 'initial', 'unset']
            }
        ]
    },
    rtlOrdering: {
        id: "215",
        definition: "Overrides ordering defaults for right-to-left content.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: ['logical', 'visual']
            }
        ]
    },
    tapHighlightColor: {
        id: "219",
        definition: "-webkit-tap-highlight-color is a non-standard CSS property that sets the color of the highlight that appears over a link while it's being tapped.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'color',
                values: ['color']
            }
        ]
    },
    textCombineUpright: {
        id: "220",
        definition: "The text-combine-upright CSS property specifies the combination of multiple characters into the space of a single character.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['integer']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['none', 'inherit', 'initial', 'unset']
                }
            ]
        }
    },
    textEmphasisColor: {
        id: "222",
        definition: "The text-emphasis-color CSS property defines the color used to draw emphasis marks on text being rendered in the HTML document.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: {
            "color": [
                {
                    type: 'color_code',
                    values: ['currentColor', 'rgba()', 'hex']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['inherit', 'initial', 'unset']
                }
            ]
        }
    },
    textEmphasisPosition: {
        id: "223",
        definition: "The text-emphasis-position CSS property describes where emphasis marks are drawn at.", 
        version: ".0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: ['over', 'right' ,'left', 'under', 'initial', 'inherit', 'unset']
            }
        ]
    },
    textEmphasisStyle: {
        id: "224",
        definition: "The text-emphasis-style CSS property defines the type of emphasis used. It can also be set, and reset, using the text-emphasis shorthand.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: {
            "value": [
                {
                    type: 'value',
                    values: ['characters', 'character codes', 'text']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['none', 'filled', 'open', 'filled sesame', 'open sesame', 'inherit', 'initial', 'unset']
                }
            ]
        }
    },
    textFillColor: {
        id: "225",
        definition: "The -webkit-text-fill-color CSS property specifies the fill color of characters of text. If this property is not set, the value of the color property is used.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: {
            "color": [
                {
                    type: 'color_code',
                    values: ['rgba()', 'hex', 'color']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['inherit', 'initial', 'unset']
                }
            ]
        }
    },
    textOrientation: {
        id: "226",
        definition: "The text-orientation CSS property defines the orientation of the text characters in a line.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: ['mixed', 'upright', 'sideways-right', 'sideways', 'use-glyph-orientation', 'inherit', 'initial', 'unset']
            }
        ]
    },
    textSecurity: {
        id: "227",
        definition: "Specifies the type of shape used to hide the letters in a password input field.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: ['circle', 'disc', 'none', 'square']
            }
        ]
    },
    textStrokeColor: {
        id: "228",
        definition: "The -webkit-text-stroke-color CSS property specifies the stroke color of characters of text. ", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: {
            "color": [
                {
                    type: 'color_code',
                    values: ['rgba()', 'hex', 'color']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['inherit', 'initial', 'unset']
                }
            ]
        }
    },
    textStrokeWidth: {
        id: "229",
        definition: "The -webkit-text-stroke-width CSS property specifies the width of the stroke for text.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: {
            "number": [
                {
                    type: 'number',
                    values: ['length']
                }
            ],
            "string": [
                {
                    type: 'string',
                    values: ['thin', 'medium', 'thick', 'inherit', 'initial', 'unset']
                }
            ]
        }
    },
    property: {
        id: "236",
        definition: "The writing-mode CSS property defines whether lines of text are laid out horizontally or vertically and the direction in which blocks progress.", 
        version: "3.0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: ['horizontal-tb', 'vertical-rl', 'vertical-lr', 'inherit', 'initial', 'unset']
            }
        ]
    },
    property: {
        id: "",
        definition: "", 
        version: ".0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: []
            }
        ]
    },
    property: {
        id: "",
        definition: "", 
        version: ".0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: []
            }
        ]
    },
    property: {
        id: "",
        definition: "", 
        version: ".0",
        prefixes: ["-webkit-", "-moz-", "-ms-", "-o-"],
        syntax: [
            {
                type: 'string',
                values: []
            }
        ]
    },
	/* backgroundPosition: {
		version: "1.0",
		syntax: [
			{
				type: 'string',
				values: ['left', 'right', 'center', 'top', 'bottom']
			},
			{
				type: 'string',
				values: ['left', 'right', 'center', 'top', 'bottom']
			}
        ]
        syntax_new: {
            "text": [
                {
                    type: 'string',
                    values: ['left', 'right', 'center']
                },
                {
                    type: 'string',
                    values: ['top', 'center',Â 'bottom']
                }
            ],
            "%": [
                {
                    type: 'percentage',
                    values: ['x%']
                },
                {
                    type: 'percentage',
                    values: ['y%']
                }
            ]
        } 
	},*/
};